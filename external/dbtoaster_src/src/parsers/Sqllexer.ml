# 1 "src/parsers/Sqllexer.mll"
    
open Sqlparser   
open Lexing   
open Type

let init_line lexbuf =
    let pos = lexbuf.Lexing.lex_curr_p in
        lexbuf.Lexing.lex_curr_p <- { pos with
            Lexing.pos_lnum = 1;
            Lexing.pos_bol = 0;
        }

let advance_line lexbuf =
    let pos = lexbuf.Lexing.lex_curr_p in
        lexbuf.Lexing.lex_curr_p <- { pos with
            Lexing.pos_lnum = pos.Lexing.pos_lnum + 1;
            Lexing.pos_bol = pos.Lexing.pos_cnum;
        }

let hashtbl_of_pair_list h l =
    List.iter (fun (p1, p2) -> Hashtbl.add h p1 p2) l

let keyword_table = Hashtbl.create 60
let keywords =   
    [   
        "CREATE", CREATE;
        "TABLE", TABLE;
        "FROM", FROM;
        "USING", USING;
        "SELECT", SELECT;   
        "WHERE", WHERE;
        "GROUP", GROUP;
        "HAVING", HAVING;
        "ORDER", ORDER;
        "BY", BY;
        "JOIN", JOIN; 
        "INNER", INNER;
        "OUTER", OUTER;
        "LEFT", LEFT;
        "RIGHT", RIGHT;
        "ON", ON;
        "AS", AS;
        "AND", AND;
        "OR", OR;
        "NOT", NOT;
        "BETWEEN", BETWEEN;
        "ASC", ASC;
        "DESC", DESC;
        "SOURCE", SOURCE;
        "ARGS", ARGS;
        "INSTANCE", INSTANCE;
        "TUPLE", TUPLE;
        "ADAPTOR", ADAPTOR;
        "BINDINGS", BINDINGS;
        "SOCKET", SOCKET;
        "FILE", FILE;
        "PIPE", PIPE;
        "FIXEDWIDTH", FIXEDWIDTH;
        "DELIMITED", DELIMITED;
        "LINE", LINE;
        "VARSIZE", VARSIZE;
        "OFFSET", OFFSET;
        "ADJUSTBY", ADJUSTBY;
        "POSTGRES", POSTGRES;
        "RELATION", RELATION;
        "DATE", DATE;
        "NATURAL", NATURAL;
        "EXISTS", EXISTS;
        "TRUE", TRUE;
        "FALSE", FALSE;
        "INT",     TYPE(TInt);
        "INTEGER", TYPE(TInt);
        "FLOAT",   TYPE(TFloat);
        "DOUBLE",  TYPE(TFloat);
        "DECIMAL", TYPE(TFloat);
        "STRING",  TYPE(TString);
        "CHAR",    CHAR;
        "VARCHAR", VARCHAR;
        "STRING", VARCHAR;
        "STREAM", STREAM;
        "SUM", SUMAGG;
        "COUNT", COUNTAGG;
        "AVG", AVGAGG;
        "MIN", MINAGG;
        "MAX", MAXAGG;
        "IN", IN;
        "ALL", ALL;
        "SOME", SOME;
        "INCLUDE", INCLUDE;
        "EXTRACT", EXTRACT;
        "LIKE", LIKE;
        "LIST", LIST; 
        "DISTINCT", DISTINCT;
        "CASE", CASE;
        "END", END;
        "WHEN", WHEN;
        "ELSE", ELSE;
        "THEN", THEN;
        "EXTERNAL", EXTERNAL;
        "FUNCTION", FUNCTION;
        "RETURNS", RETURNS;
        "UNION", UNION;
        "INTERVAL", INTERVAL;
    ]
let _ = hashtbl_of_pair_list keyword_table keywords

let ops_table = Hashtbl.create 10
let ops =
    [   
        "=",    EQ;
        "!=",   NE;
        "<>",   NE;
        "<",    LT;   
        "<=",   LE;  
        ">",    GT;   
        ">=",   GE;
        "+",    SUM;
        "-",    MINUS;
        "*",    PRODUCT;
        "/",    DIVIDE;
    ]
let _ = hashtbl_of_pair_list ops_table ops
    

# 127 "src/parsers/Sqllexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\239\255\240\255\002\000\242\255\245\255\246\255\247\255\
    \075\000\022\000\249\255\046\000\031\000\032\000\034\000\057\000\
    \152\000\174\000\254\255\001\000\255\255\225\000\162\000\249\000\
    \184\000\085\000\196\000\238\000\016\001\054\001\077\001\092\001\
    \115\001\126\001\250\255\002\000\243\255\241\255\199\000\252\255\
    \253\255\088\000\094\000\255\255\254\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \007\000\006\000\255\255\006\000\255\255\006\000\006\000\255\255\
    \002\000\002\000\255\255\001\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\002\000\002\000\002\000\002\000\255\255\002\000\
    \004\000\003\000\255\255\011\000\255\255\255\255\255\255\255\255\
    \255\255\003\000\003\000\255\255\255\255";
  Lexing.lex_default = 
   "\255\255\000\000\000\000\255\255\000\000\000\000\000\000\000\000\
    \255\255\255\255\000\000\255\255\255\255\255\255\255\255\015\000\
    \255\255\255\255\000\000\255\255\000\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\035\000\000\000\000\000\039\000\000\000\
    \000\000\255\255\255\255\000\000\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\020\000\019\000\000\000\255\255\018\000\018\000\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \020\000\012\000\000\000\000\000\000\000\000\000\000\000\015\000\
    \006\000\005\000\010\000\010\000\007\000\011\000\002\000\009\000\
    \017\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\003\000\004\000\013\000\010\000\014\000\037\000\
    \036\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\035\000\010\000\010\000\010\000\010\000\
    \034\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\026\000\026\000\044\000\
    \043\000\000\000\000\000\000\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\000\000\000\000\
    \000\000\000\000\008\000\000\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\022\000\000\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\022\000\021\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \025\000\041\000\000\000\021\000\026\000\026\000\042\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\024\000\000\000\000\000\
    \001\000\000\000\255\255\000\000\000\000\000\000\023\000\000\000\
    \000\000\021\000\000\000\000\000\030\000\000\000\030\000\000\000\
    \025\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\000\000\000\000\024\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\023\000\000\000\
    \000\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\021\000\000\000\000\000\000\000\000\000\
    \000\000\255\255\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\028\000\028\000\028\000\028\000\029\000\028\000\000\000\
    \000\000\000\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \000\000\030\000\000\000\030\000\000\000\000\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \000\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\029\000\028\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\000\000\
    \000\000\000\000\000\000\000\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\000\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\029\000\028\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\000\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \000\000\000\000\000\000\000\000\000\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\021\000\000\000\000\000\000\000\040\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\035\000\000\000\019\000\035\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\255\255\255\255\255\255\255\255\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\
    \009\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\011\000\012\000\013\000\013\000\014\000\
    \015\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\025\000\025\000\041\000\
    \042\000\255\255\255\255\255\255\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\255\255\255\255\
    \255\255\255\255\008\000\255\255\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\016\000\255\255\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\017\000\016\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \017\000\038\000\255\255\017\000\026\000\026\000\038\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\017\000\255\255\255\255\
    \000\000\255\255\035\000\255\255\255\255\255\255\017\000\255\255\
    \255\255\026\000\255\255\255\255\021\000\255\255\021\000\255\255\
    \017\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\255\255\255\255\017\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\017\000\255\255\
    \255\255\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\027\000\255\255\255\255\255\255\255\255\
    \255\255\015\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\028\000\028\000\028\000\028\000\028\000\028\000\255\255\
    \255\255\255\255\023\000\023\000\023\000\023\000\023\000\023\000\
    \255\255\029\000\255\255\029\000\255\255\255\255\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \255\255\028\000\028\000\028\000\028\000\028\000\028\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\255\255\
    \255\255\255\255\255\255\255\255\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\255\255\029\000\
    \029\000\029\000\029\000\029\000\029\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\255\255\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \255\255\255\255\255\255\255\255\255\255\031\000\031\000\031\000\
    \031\000\031\000\031\000\033\000\255\255\255\255\255\255\038\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec tokenize lexbuf =
    __ocaml_lex_tokenize_rec lexbuf 0
and __ocaml_lex_tokenize_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 150 "src/parsers/Sqllexer.mll"
                ( tokenize lexbuf )
# 333 "src/parsers/Sqllexer.ml"

  | 1 ->
# 151 "src/parsers/Sqllexer.mll"
                ( advance_line lexbuf; tokenize lexbuf )
# 338 "src/parsers/Sqllexer.ml"

  | 2 ->
# 152 "src/parsers/Sqllexer.mll"
                ( INT(int_of_string (lexeme lexbuf)) )
# 343 "src/parsers/Sqllexer.ml"

  | 3 ->
# 153 "src/parsers/Sqllexer.mll"
                ( FLOAT(float_of_string (lexeme lexbuf)) )
# 348 "src/parsers/Sqllexer.ml"

  | 4 ->
# 154 "src/parsers/Sqllexer.mll"
                ( FLOAT(float_of_string (lexeme lexbuf)) )
# 353 "src/parsers/Sqllexer.ml"

  | 5 ->
# 155 "src/parsers/Sqllexer.mll"
                ( let s = lexeme lexbuf in 
                      STRING(String.sub s 1 ((String.length s)-2)) )
# 359 "src/parsers/Sqllexer.ml"

  | 6 ->
# 158 "src/parsers/Sqllexer.mll"
                ( let op_str = lexeme lexbuf in
                      try Hashtbl.find ops_table op_str
                      with Not_found -> 
                          raise (Failure ("unknown operator "^(op_str)))
                )
# 368 "src/parsers/Sqllexer.ml"

  | 7 ->
# 163 "src/parsers/Sqllexer.mll"
                ( 
                  let keyword_str = lexeme lexbuf in
                  let keyword_str_uc = String.uppercase keyword_str in
                      try Hashtbl.find keyword_table keyword_str_uc
                      with Not_found -> ID(keyword_str)
                )
# 378 "src/parsers/Sqllexer.ml"

  | 8 ->
# 169 "src/parsers/Sqllexer.mll"
                ( COMMA )
# 383 "src/parsers/Sqllexer.ml"

  | 9 ->
# 170 "src/parsers/Sqllexer.mll"
                ( LPAREN )
# 388 "src/parsers/Sqllexer.ml"

  | 10 ->
# 171 "src/parsers/Sqllexer.mll"
                ( RPAREN )
# 393 "src/parsers/Sqllexer.ml"

  | 11 ->
# 172 "src/parsers/Sqllexer.mll"
                ( tokenize lexbuf)
# 398 "src/parsers/Sqllexer.ml"

  | 12 ->
# 173 "src/parsers/Sqllexer.mll"
                ( comment 1 lexbuf )
# 403 "src/parsers/Sqllexer.ml"

  | 13 ->
# 174 "src/parsers/Sqllexer.mll"
                ( EOSTMT )
# 408 "src/parsers/Sqllexer.ml"

  | 14 ->
# 175 "src/parsers/Sqllexer.mll"
                ( SETVALUE )
# 413 "src/parsers/Sqllexer.ml"

  | 15 ->
# 176 "src/parsers/Sqllexer.mll"
                ( PERIOD )
# 418 "src/parsers/Sqllexer.ml"

  | 16 ->
# 177 "src/parsers/Sqllexer.mll"
                ( EOF )
# 423 "src/parsers/Sqllexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_tokenize_rec lexbuf __ocaml_lex_state

and comment depth lexbuf =
    __ocaml_lex_comment_rec depth lexbuf 38
and __ocaml_lex_comment_rec depth lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 180 "src/parsers/Sqllexer.mll"
                ( raise (Failure ("nested comments are invalid")) )
# 434 "src/parsers/Sqllexer.ml"

  | 1 ->
# 181 "src/parsers/Sqllexer.mll"
                ( tokenize lexbuf )
# 439 "src/parsers/Sqllexer.ml"

  | 2 ->
# 182 "src/parsers/Sqllexer.mll"
                ( raise (Failure ("hit end of file in a comment")) )
# 444 "src/parsers/Sqllexer.ml"

  | 3 ->
# 183 "src/parsers/Sqllexer.mll"
                ( comment depth lexbuf )
# 449 "src/parsers/Sqllexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_comment_rec depth lexbuf __ocaml_lex_state

;;

# 185 "src/parsers/Sqllexer.mll"
 
   (* Initialize the Sqlparser's parsing capabilities, so that we can have
      include directives *)
   Sql.parse_file := (fun fname -> 
      let lexbuff = ParsingExtras.lexbuf_for_file fname in
         Sqlparser.dbtoasterSqlStmtList tokenize lexbuff   
   )

# 464 "src/parsers/Sqllexer.ml"
