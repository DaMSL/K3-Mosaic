type token =
  | TYPE of (Type.type_t)
  | INTEGER of (int)
  | ID of (string)
  | CONST_STRING of (string)
  | CONST_FLOAT of (float)
  | EQ
  | NE
  | LT
  | LE
  | GT
  | SUM
  | MINUS
  | PRODUCT
  | COMMA
  | LPAREN
  | RPAREN
  | LBRACK
  | RBRACK
  | PERIOD
  | COLON
  | DOLLAR
  | ON
  | SYSTEM
  | READY
  | QUERY
  | IF
  | IF0
  | ELSE
  | ITERATE
  | LAMBDA
  | APPLY
  | MAP
  | FLATTEN
  | AGGREGATE
  | GROUPBYAGGREGATE
  | MEMBER
  | LOOKUP
  | SLICE
  | FILTER
  | SINGLETON
  | COMBINE
  | CREATE
  | TABLE
  | STREAM
  | FROM
  | SOCKET
  | FILE
  | PIPE
  | FIXEDWIDTH
  | DELIMITED
  | LINE
  | VARSIZE
  | OFFSET
  | ADJUSTBY
  | SETVALUE
  | PCUPDATE
  | PCVALUEUPDATE
  | PCELEMENTREMOVE
  | EXTERNALLAMBDA
  | INT
  | UNIT
  | FLOAT
  | COLLECTION
  | STRINGTYPE
  | CHAR
  | VARCHAR
  | DATE
  | IN
  | OUT
  | EOSTMT
  | EOF
  | LBRACE
  | RBRACE
  | BOUND
  | ARROW

open Parsing;;
let _ = parse_error;;
# 1 "src/parsers/K3parser.mly"
    
   open Calculus
   open Type
   open Constants
   open K3
   exception K3ParseError of string
   exception K3TypeError of string
   exception K3FeatureUnsupported of string
    
   type k3_statement_t = K3.statement_t
   type k3_trigger_t = K3.trigger_t
   type k3_program_t = K3.prog_t
   (*
   type k3_map_t = K3.map_t
   type map_schema_t = (Type.var_t list * Type.var_t list)
   *)

    
   let parse_error s =
      let lex_pos = symbol_end_pos () in
      let line_pos_str = string_of_int (lex_pos.Lexing.pos_lnum) in
      let char_pos_str = string_of_int
         (lex_pos.Lexing.pos_cnum - lex_pos.Lexing.pos_bol)
      in
         print_endline
            ("Parsing error '" ^ s ^ "' at line: " ^ line_pos_str ^
             " char: " ^ (char_pos_str));
         flush stdout

   let addSchema rel old_rels = 
      let (name, schema, reltype, source, adaptor) = rel in
         Schema.add_rel old_rels ~source:source ~adaptor:adaptor
                        (name, schema, reltype);
         old_rels

   let collections:((string, expr_t) Hashtbl.t) = Hashtbl.create 10

   let add_collection name expr =
      Hashtbl.replace collections name expr

   let get_collection c_id = 
      try Hashtbl.find collections c_id
      with _ -> raise (K3TypeError("Collection '"^c_id^"' is not defined!"))
      
   let get_collection_schema name =  begin match get_collection name with
      | SingletonPC(id,t) ->  [],[]
      | OutPC(id,outs,t) ->   [],outs
      | InPC(id,ins,t) ->     ins,[]
      | PC(id,ins,outs,t) ->  ins,outs
      | _ -> failwith "K3 expression must be PC!"
   end
   
   let create_map coll = List.hd (get_expr_map_schema coll)

   let patterns:(Patterns.pattern_map ref) = ref []

   let add_pattern name (new_pattern: Patterns.pattern) = 
      patterns := Patterns.add_pattern !patterns (name, new_pattern)

   let tl_queries: (toplevel_query_t list ref) = ref []

   let add_tl qname qexp = 
      tl_queries := (qname, qexp)::(!tl_queries)
   
   let must_infer_from_slice: (bool ref) = ref true

   let slice_infering statement var_bind_list =
      let calc_result stmt = 
         let map_name = match stmt with 
            | PC(n, _, _, _) -> n
            | OutPC(n, _, _) -> n
            | InPC(n, _, _)  -> n
            | SingletonPC(n, _) -> n
            | _ -> raise (K3TypeError("Incorrect collection!"))
         in
         let (in_var_types, out_var_types) = get_collection_schema map_name in
         if (!must_infer_from_slice) then
         begin
            let get_vars l = List.map fst l in
            let in_vars = get_vars in_var_types in
            let out_vars = get_vars out_var_types in
            let var_list = get_vars var_bind_list in
            let in_filt = ListAsSet.inter in_vars var_list in
            let out_filt = ListAsSet.inter out_vars var_list in
            let in_pattern = Patterns.make_in_pattern in_vars in_filt in
            let out_pattern = Patterns.make_out_pattern out_vars out_filt in
            if in_filt <> [] then (add_pattern map_name in_pattern) else ();
            if out_filt <> [] then (add_pattern map_name out_pattern) else ()
         end
         else ();
         in_var_types@out_var_types
      in
     
      let rec rcr stmt = match stmt with
         | Map(_, e) -> rcr e         
         | Slice(e, _, _) -> rcr e
         | Block(el) ->
            let rec last_item l = 
               if List.length l = 1 
               then List.hd l
               else last_item (List.tl l)
            in
               rcr (last_item el)
          | PC _ | OutPC _ | InPC _ | SingletonPC _ -> calc_result stmt
          | _ -> raise (
             K3TypeError("First argument of Slice should be a Collection!"))
      in
      rcr statement
      
   let varType_to_varK3Type = List.map (fun (v,t) -> (v,TBase(t)))   
   let varK3Type_to_varType = List.map (fun (v,t) -> (v,base_type_of t))
# 193 "src/parsers/K3parser.ml"
let yytransl_const = [|
  262 (* EQ *);
  263 (* NE *);
  264 (* LT *);
  265 (* LE *);
  266 (* GT *);
  267 (* SUM *);
  268 (* MINUS *);
  269 (* PRODUCT *);
  270 (* COMMA *);
  271 (* LPAREN *);
  272 (* RPAREN *);
  273 (* LBRACK *);
  274 (* RBRACK *);
  275 (* PERIOD *);
  276 (* COLON *);
  277 (* DOLLAR *);
  278 (* ON *);
  279 (* SYSTEM *);
  280 (* READY *);
  281 (* QUERY *);
  282 (* IF *);
  283 (* IF0 *);
  284 (* ELSE *);
  285 (* ITERATE *);
  286 (* LAMBDA *);
  287 (* APPLY *);
  288 (* MAP *);
  289 (* FLATTEN *);
  290 (* AGGREGATE *);
  291 (* GROUPBYAGGREGATE *);
  292 (* MEMBER *);
  293 (* LOOKUP *);
  294 (* SLICE *);
  295 (* FILTER *);
  296 (* SINGLETON *);
  297 (* COMBINE *);
  298 (* CREATE *);
  299 (* TABLE *);
  300 (* STREAM *);
  301 (* FROM *);
  302 (* SOCKET *);
  303 (* FILE *);
  304 (* PIPE *);
  305 (* FIXEDWIDTH *);
  306 (* DELIMITED *);
  307 (* LINE *);
  308 (* VARSIZE *);
  309 (* OFFSET *);
  310 (* ADJUSTBY *);
  311 (* SETVALUE *);
  312 (* PCUPDATE *);
  313 (* PCVALUEUPDATE *);
  314 (* PCELEMENTREMOVE *);
  315 (* EXTERNALLAMBDA *);
  316 (* INT *);
  317 (* UNIT *);
  318 (* FLOAT *);
  319 (* COLLECTION *);
  320 (* STRINGTYPE *);
  321 (* CHAR *);
  322 (* VARCHAR *);
  323 (* DATE *);
  324 (* IN *);
  325 (* OUT *);
  326 (* EOSTMT *);
    0 (* EOF *);
  327 (* LBRACE *);
  328 (* RBRACE *);
  329 (* BOUND *);
  330 (* ARROW *);
    0|]

let yytransl_block = [|
  257 (* TYPE *);
  258 (* INTEGER *);
  259 (* ID *);
  260 (* CONST_STRING *);
  261 (* CONST_FLOAT *);
    0|]

let yylhs = "\255\255\
\001\000\005\000\005\000\003\000\003\000\003\000\003\000\006\000\
\006\000\011\000\007\000\007\000\012\000\013\000\013\000\014\000\
\014\000\015\000\015\000\015\000\016\000\010\000\010\000\017\000\
\017\000\009\000\009\000\009\000\009\000\018\000\018\000\018\000\
\018\000\018\000\018\000\018\000\018\000\019\000\019\000\020\000\
\021\000\021\000\008\000\008\000\022\000\022\000\022\000\023\000\
\023\000\024\000\024\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\025\000\025\000\
\025\000\025\000\026\000\026\000\027\000\051\000\051\000\051\000\
\028\000\028\000\028\000\028\000\028\000\028\000\029\000\030\000\
\031\000\032\000\033\000\052\000\052\000\052\000\034\000\035\000\
\036\000\037\000\038\000\039\000\040\000\041\000\042\000\043\000\
\053\000\053\000\053\000\054\000\044\000\045\000\047\000\046\000\
\048\000\049\000\050\000\055\000\055\000\004\000\004\000\056\000\
\056\000\057\000\057\000\058\000\058\000\060\000\060\000\059\000\
\059\000\059\000\062\000\063\000\063\000\063\000\064\000\064\000\
\064\000\065\000\065\000\061\000\061\000\061\000\061\000\061\000\
\061\000\061\000\000\000\000\000\000\000"

let yylen = "\002\000\
\005\000\002\000\001\000\011\000\010\000\010\000\009\000\003\000\
\000\000\004\000\003\000\000\000\003\000\003\000\001\000\004\000\
\004\000\003\000\001\000\000\000\003\000\003\000\001\000\003\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\003\000\004\000\005\000\003\000\001\000\003\000\
\003\000\001\000\002\000\001\000\009\000\009\000\006\000\001\000\
\001\000\003\000\000\000\003\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\004\000\003\000\001\000\003\000\003\000\002\000\001\000\
\003\000\003\000\003\000\003\000\003\000\003\000\005\000\007\000\
\003\000\006\000\007\000\001\000\003\000\003\000\009\000\006\000\
\006\000\004\000\008\000\010\000\008\000\008\000\008\000\006\000\
\003\000\001\000\000\000\003\000\002\000\010\000\012\000\014\000\
\004\000\004\000\008\000\001\000\000\000\003\000\000\000\006\000\
\008\000\001\000\001\000\000\000\001\000\002\000\004\000\003\000\
\004\000\003\000\002\000\002\000\002\000\002\000\003\000\004\000\
\001\000\003\000\005\000\001\000\001\000\004\000\004\000\001\000\
\001\000\001\000\002\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\155\000\000\000\000\000\
\080\000\000\000\081\000\079\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\053\000\054\000\055\000\
\056\000\057\000\058\000\059\000\060\000\061\000\062\000\063\000\
\064\000\065\000\066\000\067\000\068\000\069\000\070\000\071\000\
\072\000\073\000\074\000\075\000\076\000\077\000\078\000\000\000\
\157\000\130\000\131\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\117\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\002\000\000\000\000\000\000\000\126\000\000\000\000\000\
\030\000\034\000\031\000\000\000\033\000\032\000\083\000\000\000\
\085\000\052\000\000\000\000\000\000\000\000\000\000\000\000\000\
\100\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\097\000\000\000\000\000\000\000\000\000\000\000\
\090\000\026\000\027\000\028\000\029\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\086\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\106\000\000\000\000\000\000\000\
\000\000\000\000\000\000\121\000\122\000\000\000\000\000\000\000\
\000\000\082\000\000\000\000\000\000\000\133\000\000\000\000\000\
\000\000\001\000\000\000\000\000\008\000\000\000\035\000\000\000\
\000\000\000\000\000\000\000\000\040\000\000\000\101\000\102\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\148\000\
\000\000\000\000\029\000\149\000\000\000\000\000\000\000\000\000\
\000\000\013\000\000\000\048\000\049\000\000\000\000\000\043\000\
\011\000\038\000\000\000\036\000\000\000\098\000\041\000\000\000\
\000\000\104\000\105\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\112\000\124\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\037\000\000\000\000\000\
\099\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\135\000\000\000\000\000\129\000\000\000\000\000\
\000\000\000\000\014\000\000\000\000\000\000\000\000\000\107\000\
\000\000\109\000\110\000\000\000\111\000\113\000\000\000\000\000\
\000\000\123\000\024\000\000\000\000\000\000\000\022\000\150\000\
\151\000\000\000\000\000\000\000\000\000\017\000\000\000\016\000\
\000\000\000\000\000\000\000\000\103\000\000\000\000\000\000\000\
\000\000\007\000\000\000\000\000\000\000\000\000\000\000\000\000\
\138\000\000\000\000\000\136\000\021\000\018\000\000\000\047\000\
\000\000\000\000\108\000\118\000\000\000\000\000\005\000\006\000\
\000\000\142\000\140\000\141\000\000\000\139\000\137\000\050\000\
\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\
\000\000\119\000\000\000\143\000\000\000\045\000\046\000\000\000\
\000\000\144\000\120\000\000\000\000\000\147\000"

let yydgoto = "\004\000\
\006\000\073\000\069\000\007\000\070\000\108\000\162\000\202\000\
\158\000\019\001\109\000\163\000\242\000\243\000\056\001\057\001\
\020\001\165\000\166\000\129\000\175\000\203\000\247\000\090\001\
\038\000\039\000\040\000\041\000\042\000\043\000\044\000\045\000\
\046\000\047\000\048\000\049\000\050\000\051\000\052\000\053\000\
\054\000\055\000\056\000\057\000\058\000\059\000\060\000\061\000\
\062\000\063\000\012\001\130\000\009\001\010\001\013\001\008\000\
\068\000\197\000\054\001\198\000\237\000\105\001\106\001\126\001\
\141\001"

let yysindex = "\181\000\
\236\254\152\000\023\255\000\000\086\255\000\000\023\255\221\254\
\000\000\105\255\000\000\000\000\152\000\152\000\044\255\058\255\
\118\255\127\255\149\255\156\255\160\255\164\255\172\255\178\255\
\199\255\203\255\208\255\216\255\218\255\135\255\227\255\229\255\
\231\255\234\255\235\255\152\000\059\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\237\255\
\000\000\000\000\000\000\244\255\023\255\136\255\236\254\128\255\
\053\255\243\255\146\255\000\000\152\000\152\000\152\000\116\255\
\152\000\152\000\152\000\152\000\152\000\152\000\152\000\152\000\
\152\000\152\000\152\000\152\000\152\000\152\000\251\255\252\255\
\183\255\152\000\152\000\152\000\152\000\152\000\152\000\096\255\
\242\255\000\000\003\000\010\000\190\255\000\000\128\255\128\255\
\000\000\000\000\000\000\246\255\000\000\000\000\000\000\152\000\
\000\000\000\000\192\255\204\255\008\001\012\000\013\000\116\255\
\000\000\134\255\017\001\026\001\221\255\035\001\044\001\053\001\
\062\001\071\001\080\001\232\255\202\255\089\001\098\001\107\001\
\006\000\005\000\000\000\154\255\154\255\154\255\154\255\009\000\
\000\000\000\000\000\000\000\000\000\000\018\000\034\000\245\255\
\036\000\042\000\011\000\136\255\015\000\069\000\064\000\128\255\
\000\000\152\000\152\000\152\000\128\255\024\000\073\000\072\000\
\116\255\027\000\152\000\152\000\000\000\152\000\152\000\082\000\
\089\000\090\000\152\000\000\000\000\000\091\000\099\000\100\000\
\116\255\000\000\107\000\005\255\085\000\000\000\152\000\069\255\
\109\255\000\000\042\000\010\000\000\000\128\255\000\000\051\000\
\110\000\138\255\059\000\046\000\000\000\013\000\000\000\000\000\
\113\000\152\000\084\000\188\000\116\001\125\001\152\000\152\000\
\127\000\209\000\152\000\152\000\152\000\117\000\022\255\000\000\
\119\000\121\000\000\000\000\000\123\000\094\000\059\000\075\000\
\076\000\000\000\134\000\000\000\000\000\126\000\149\000\000\000\
\000\000\000\000\128\255\000\000\152\000\000\000\000\000\087\000\
\035\255\000\000\000\000\152\000\152\000\141\000\143\000\092\000\
\144\000\096\000\000\000\000\000\146\000\150\000\151\000\096\255\
\160\000\153\000\154\000\157\000\196\000\198\000\034\000\189\255\
\200\000\200\000\069\255\132\000\179\255\000\000\059\000\152\000\
\000\000\220\000\134\001\190\000\197\000\152\000\205\000\127\000\
\210\000\216\000\218\000\219\000\096\255\027\255\195\000\211\000\
\225\000\227\000\000\000\200\255\230\000\000\000\226\000\173\000\
\238\000\182\000\000\000\152\000\211\000\211\000\043\255\000\000\
\152\000\000\000\000\000\059\000\000\000\000\000\152\000\239\000\
\240\000\000\000\000\000\193\000\247\000\110\255\000\000\000\000\
\000\000\090\255\009\001\090\255\015\001\000\000\200\000\000\000\
\103\255\204\000\252\000\011\001\000\000\231\000\242\000\152\000\
\152\000\000\000\213\000\222\000\020\001\251\000\045\001\004\001\
\000\000\060\001\090\255\000\000\000\000\000\000\152\000\000\000\
\241\000\250\000\000\000\000\000\054\001\056\001\000\000\000\000\
\013\001\000\000\000\000\000\000\066\001\000\000\000\000\000\000\
\152\000\152\000\076\001\083\001\000\000\015\255\029\001\036\001\
\152\000\000\000\037\001\000\000\094\001\000\000\000\000\253\000\
\113\001\000\000\000\000\105\001\123\001\000\000"

let yyrindex = "\000\000\
\132\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\128\002\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\245\254\017\255\132\001\000\000\
\006\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\115\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\045\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\032\000\068\000\104\000\135\000\017\000\
\000\000\000\000\000\000\000\000\000\000\000\000\128\001\000\000\
\000\000\000\000\000\000\017\255\124\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\136\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\149\002\115\001\000\000\000\000\000\000\000\000\
\000\000\000\000\033\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\133\001\000\000\135\001\135\001\135\001\000\000\000\000\000\000\
\193\255\205\255\000\000\000\000\138\001\082\001\085\001\000\000\
\000\000\000\000\086\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\139\001\000\000\000\000\000\000\000\000\000\000\000\000\
\158\255\000\000\000\000\206\255\000\000\000\000\000\000\000\000\
\078\001\078\001\000\000\000\000\000\000\000\000\105\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\133\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\087\001\000\000\000\000\088\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\243\254\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\078\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\135\001\
\135\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\088\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\091\001\000\000\000\000\000\000\
\088\001\088\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\142\001\000\000\000\000"

let yygindex = "\000\000\
\000\000\254\255\159\002\092\002\095\002\001\002\218\001\220\001\
\073\255\231\254\000\000\000\000\141\001\000\000\008\255\000\000\
\000\000\191\255\152\255\148\255\211\001\000\000\000\000\155\254\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\002\000\137\255\130\001\000\000\030\255\000\000\
\000\000\000\000\000\000\148\001\000\000\176\254\000\000\000\000\
\023\001"

let yytablesize = 684
let yytable = "\037\000\
\084\000\014\001\015\001\108\001\116\000\232\000\119\000\167\000\
\176\000\128\001\003\000\075\000\236\000\003\000\074\000\088\000\
\089\000\139\001\174\000\009\000\077\001\005\000\079\001\088\000\
\017\001\064\000\127\001\135\001\136\001\017\001\140\001\091\000\
\095\000\058\001\071\000\091\001\092\001\097\000\009\000\018\001\
\098\000\099\000\100\000\101\000\076\001\102\000\076\000\103\000\
\098\000\099\000\100\000\101\000\101\001\102\000\087\000\103\000\
\116\000\217\000\098\000\099\000\100\000\101\000\087\000\102\000\
\154\000\103\000\155\000\092\000\156\000\233\000\234\000\235\000\
\077\000\230\000\123\000\124\000\125\000\088\000\131\000\132\000\
\133\000\134\000\135\000\136\000\137\000\138\000\139\000\140\000\
\044\001\142\000\143\000\144\000\141\000\102\001\110\001\148\000\
\149\000\150\000\151\000\152\000\153\000\250\000\209\000\093\000\
\096\000\174\000\033\001\213\000\098\000\099\000\100\000\101\000\
\017\001\102\000\093\001\103\000\087\000\075\001\126\000\244\000\
\245\000\169\000\120\000\127\000\072\000\117\001\118\001\100\001\
\066\000\067\000\128\000\246\000\078\000\039\000\094\000\111\000\
\240\000\241\000\103\001\039\000\104\001\079\000\112\000\098\000\
\099\000\100\000\101\000\177\000\102\000\178\000\103\000\098\000\
\099\000\100\000\101\000\154\000\102\000\155\000\103\000\156\000\
\107\000\122\000\157\000\080\000\102\000\253\000\103\000\210\000\
\211\000\212\000\081\000\025\000\111\001\025\000\082\000\025\000\
\219\000\220\000\083\000\221\000\222\000\001\000\002\000\003\000\
\226\000\030\001\084\000\113\000\114\000\115\000\116\000\117\000\
\085\000\061\001\118\000\062\001\239\000\098\000\099\000\100\000\
\101\000\082\001\102\000\083\001\103\000\091\000\153\000\170\000\
\153\000\098\000\099\000\100\000\101\000\086\000\102\000\001\001\
\103\000\087\000\152\000\171\000\152\000\023\000\088\000\023\000\
\006\001\007\001\098\000\099\000\100\000\101\000\089\000\102\000\
\090\000\103\000\052\001\053\001\181\000\098\000\099\000\100\000\
\101\000\092\000\102\000\093\000\103\000\094\000\105\000\188\000\
\095\000\096\000\031\001\104\000\121\000\145\000\147\000\146\000\
\159\000\034\001\035\001\164\000\168\000\160\000\084\000\084\000\
\084\000\084\000\084\000\084\000\161\000\084\000\084\000\126\000\
\084\000\189\000\084\000\193\000\194\000\103\000\089\000\089\000\
\089\000\089\000\089\000\089\000\084\000\063\001\089\000\173\000\
\089\000\195\000\089\000\068\001\196\000\091\000\091\000\091\000\
\091\000\091\000\095\000\199\000\089\000\091\000\095\000\091\000\
\095\000\091\000\095\000\098\000\099\000\100\000\101\000\200\000\
\102\000\089\001\103\000\091\000\095\000\254\000\094\001\201\000\
\098\000\099\000\100\000\101\000\095\001\102\000\084\000\103\000\
\084\000\092\000\092\000\092\000\092\000\092\000\207\000\208\000\
\204\000\092\000\215\000\092\000\206\000\092\000\089\000\216\000\
\089\000\098\000\099\000\100\000\101\000\214\000\102\000\092\000\
\103\000\218\000\223\000\002\001\238\000\091\000\095\000\091\000\
\095\000\224\000\225\000\227\000\089\001\093\000\093\000\093\000\
\093\000\093\000\096\000\228\000\229\000\093\000\096\000\093\000\
\096\000\093\000\096\000\231\000\251\000\252\000\089\001\089\001\
\000\001\008\001\016\001\093\000\096\000\021\001\144\001\022\001\
\023\001\092\000\024\001\092\000\094\000\094\000\094\000\094\000\
\094\000\025\001\026\001\027\001\094\000\028\001\094\000\029\001\
\094\000\009\000\010\000\011\000\012\000\032\001\036\001\013\000\
\037\001\039\001\094\000\041\001\038\001\040\001\014\000\042\001\
\043\001\046\001\048\001\047\001\015\000\093\000\096\000\093\000\
\096\000\016\000\017\000\045\001\018\000\019\000\020\000\021\000\
\022\000\023\000\024\000\025\000\026\000\027\000\028\000\029\000\
\030\000\098\000\099\000\100\000\101\000\049\001\102\000\050\001\
\103\000\055\001\060\001\003\001\094\000\066\001\094\000\031\000\
\032\000\033\000\034\000\078\001\067\001\017\001\098\000\099\000\
\100\000\101\000\035\000\102\000\069\001\103\000\036\000\071\001\
\011\001\098\000\099\000\100\000\101\000\072\001\102\000\073\001\
\103\000\084\001\074\001\064\001\098\000\099\000\100\000\101\000\
\080\001\102\000\081\001\103\000\086\001\085\001\115\001\098\000\
\099\000\100\000\101\000\087\001\102\000\088\001\103\000\096\001\
\097\001\116\001\098\000\099\000\100\000\101\000\098\001\102\000\
\099\001\103\000\107\001\113\001\147\001\098\000\099\000\100\000\
\101\000\109\001\102\000\112\001\103\000\172\000\098\000\099\000\
\100\000\101\000\119\001\102\000\114\001\103\000\179\000\098\000\
\099\000\100\000\101\000\120\001\102\000\121\001\103\000\180\000\
\098\000\099\000\100\000\101\000\122\001\102\000\123\001\103\000\
\182\000\098\000\099\000\100\000\101\000\124\001\102\000\129\001\
\103\000\183\000\098\000\099\000\100\000\101\000\125\001\102\000\
\130\001\103\000\184\000\098\000\099\000\100\000\101\000\131\001\
\102\000\132\001\103\000\185\000\098\000\099\000\100\000\101\000\
\134\001\102\000\133\001\103\000\186\000\098\000\099\000\100\000\
\101\000\137\001\102\000\145\001\103\000\187\000\098\000\099\000\
\100\000\101\000\138\001\102\000\142\001\103\000\190\000\098\000\
\099\000\100\000\101\000\143\001\102\000\146\001\103\000\191\000\
\098\000\099\000\100\000\101\000\148\001\102\000\149\001\103\000\
\192\000\098\000\099\000\100\000\101\000\139\001\102\000\156\000\
\103\000\004\001\098\000\099\000\100\000\101\000\127\000\102\000\
\012\000\103\000\005\001\098\000\099\000\100\000\101\000\132\000\
\102\000\042\000\103\000\065\001\044\000\020\000\115\000\128\000\
\125\000\134\000\010\000\015\000\114\000\146\000\019\000\051\000\
\145\000\065\000\110\000\106\000\205\000\249\000\248\000\059\001\
\255\000\070\001\051\001\150\001"

let yycheck = "\002\000\
\000\000\228\000\229\000\084\001\018\001\001\001\072\000\112\000\
\128\000\111\001\022\001\014\000\196\000\025\001\013\000\010\001\
\000\000\003\001\127\000\003\001\046\001\042\001\048\001\018\001\
\003\001\003\001\107\001\129\001\130\001\003\001\016\001\000\000\
\000\000\026\001\070\001\061\001\062\001\036\000\022\001\018\001\
\006\001\007\001\008\001\009\001\018\001\011\001\003\001\013\001\
\006\001\007\001\008\001\009\001\078\001\011\001\010\001\013\001\
\070\001\177\000\006\001\007\001\008\001\009\001\018\001\011\001\
\060\001\013\001\062\001\000\000\064\001\065\001\066\001\067\001\
\015\001\193\000\077\000\078\000\079\000\072\001\081\000\082\000\
\083\000\084\000\085\000\086\000\087\000\088\000\089\000\090\000\
\016\001\092\000\093\000\094\000\091\000\004\001\087\001\098\000\
\099\000\100\000\101\000\102\000\103\000\206\000\168\000\000\000\
\000\000\214\000\072\001\173\000\006\001\007\001\008\001\009\001\
\003\001\011\001\072\001\013\001\072\001\045\001\003\001\011\001\
\012\001\120\000\070\001\008\001\020\001\096\001\097\001\018\001\
\043\001\044\001\015\001\023\001\015\001\010\001\000\000\008\001\
\068\001\069\001\049\001\016\001\051\001\015\001\015\001\006\001\
\007\001\008\001\009\001\014\001\011\001\016\001\013\001\006\001\
\007\001\008\001\009\001\060\001\011\001\062\001\013\001\064\001\
\025\001\016\001\067\001\015\001\011\001\028\001\013\001\170\000\
\171\000\172\000\015\001\014\001\070\001\016\001\015\001\018\001\
\179\000\180\000\015\001\182\000\183\000\001\000\002\000\003\000\
\187\000\251\000\015\001\060\001\061\001\062\001\063\001\064\001\
\015\001\015\001\067\001\017\001\199\000\006\001\007\001\008\001\
\009\001\002\001\011\001\004\001\013\001\071\001\014\001\016\001\
\016\001\006\001\007\001\008\001\009\001\015\001\011\001\218\000\
\013\001\015\001\014\001\016\001\016\001\016\001\015\001\018\001\
\223\000\224\000\006\001\007\001\008\001\009\001\015\001\011\001\
\015\001\013\001\046\001\047\001\016\001\006\001\007\001\008\001\
\009\001\015\001\011\001\015\001\013\001\015\001\003\001\016\001\
\015\001\015\001\253\000\015\001\010\001\003\001\072\001\004\001\
\015\001\004\001\005\001\070\001\015\001\003\001\006\001\007\001\
\008\001\009\001\010\001\011\001\003\001\013\001\014\001\003\001\
\016\001\072\001\018\001\014\001\016\001\013\001\006\001\007\001\
\008\001\009\001\010\001\011\001\028\001\032\001\014\001\020\001\
\016\001\016\001\018\001\038\001\003\001\006\001\007\001\008\001\
\009\001\010\001\010\001\055\001\028\001\014\001\014\001\016\001\
\016\001\018\001\018\001\006\001\007\001\008\001\009\001\020\001\
\011\001\060\001\013\001\028\001\028\001\016\001\065\001\022\001\
\006\001\007\001\008\001\009\001\071\001\011\001\070\001\013\001\
\072\001\006\001\007\001\008\001\009\001\010\001\010\001\016\001\
\070\001\014\001\010\001\016\001\070\001\018\001\070\001\016\001\
\072\001\006\001\007\001\008\001\009\001\070\001\011\001\028\001\
\013\001\071\001\017\001\016\001\016\001\070\001\070\001\072\001\
\072\001\017\001\017\001\017\001\111\001\006\001\007\001\008\001\
\009\001\010\001\010\001\017\001\017\001\014\001\014\001\016\001\
\016\001\018\001\018\001\017\001\074\001\016\001\129\001\130\001\
\016\001\003\001\014\001\028\001\028\001\015\001\137\001\015\001\
\014\001\070\001\045\001\072\001\006\001\007\001\008\001\009\001\
\010\001\071\001\071\001\014\001\014\001\024\001\016\001\003\001\
\018\001\002\001\003\001\004\001\005\001\071\001\018\001\008\001\
\018\001\018\001\028\001\018\001\073\001\070\001\015\001\018\001\
\018\001\017\001\014\001\018\001\021\001\070\001\070\001\072\001\
\072\001\026\001\027\001\020\001\029\001\030\001\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\006\001\007\001\008\001\009\001\002\001\011\001\002\001\
\013\001\002\001\071\001\016\001\070\001\016\001\072\001\056\001\
\057\001\058\001\059\001\017\001\016\001\003\001\006\001\007\001\
\008\001\009\001\067\001\011\001\016\001\013\001\071\001\014\001\
\016\001\006\001\007\001\008\001\009\001\014\001\011\001\014\001\
\013\001\004\001\016\001\016\001\006\001\007\001\008\001\009\001\
\016\001\011\001\016\001\013\001\072\001\020\001\016\001\006\001\
\007\001\008\001\009\001\014\001\011\001\072\001\013\001\017\001\
\017\001\016\001\006\001\007\001\008\001\009\001\070\001\011\001\
\018\001\013\001\002\001\016\001\016\001\006\001\007\001\008\001\
\009\001\003\001\011\001\072\001\013\001\014\001\006\001\007\001\
\008\001\009\001\070\001\011\001\018\001\013\001\014\001\006\001\
\007\001\008\001\009\001\070\001\011\001\018\001\013\001\014\001\
\006\001\007\001\008\001\009\001\050\001\011\001\002\001\013\001\
\014\001\006\001\007\001\008\001\009\001\050\001\011\001\071\001\
\013\001\014\001\006\001\007\001\008\001\009\001\003\001\011\001\
\071\001\013\001\014\001\006\001\007\001\008\001\009\001\018\001\
\011\001\018\001\013\001\014\001\006\001\007\001\008\001\009\001\
\015\001\011\001\070\001\013\001\014\001\006\001\007\001\008\001\
\009\001\014\001\011\001\055\001\013\001\014\001\006\001\007\001\
\008\001\009\001\016\001\011\001\072\001\013\001\014\001\006\001\
\007\001\008\001\009\001\072\001\011\001\016\001\013\001\014\001\
\006\001\007\001\008\001\009\001\004\001\011\001\014\001\013\001\
\014\001\006\001\007\001\008\001\009\001\003\001\011\001\000\000\
\013\001\014\001\006\001\007\001\008\001\009\001\003\001\011\001\
\022\001\013\001\014\001\006\001\007\001\008\001\009\001\016\001\
\011\001\010\001\013\001\014\001\000\000\072\001\018\001\070\001\
\018\001\016\001\070\001\070\001\018\001\016\001\072\001\072\001\
\070\001\003\000\071\000\069\000\164\000\204\000\203\000\027\001\
\214\000\040\001\023\001\149\001"

let yynames_const = "\
  EQ\000\
  NE\000\
  LT\000\
  LE\000\
  GT\000\
  SUM\000\
  MINUS\000\
  PRODUCT\000\
  COMMA\000\
  LPAREN\000\
  RPAREN\000\
  LBRACK\000\
  RBRACK\000\
  PERIOD\000\
  COLON\000\
  DOLLAR\000\
  ON\000\
  SYSTEM\000\
  READY\000\
  QUERY\000\
  IF\000\
  IF0\000\
  ELSE\000\
  ITERATE\000\
  LAMBDA\000\
  APPLY\000\
  MAP\000\
  FLATTEN\000\
  AGGREGATE\000\
  GROUPBYAGGREGATE\000\
  MEMBER\000\
  LOOKUP\000\
  SLICE\000\
  FILTER\000\
  SINGLETON\000\
  COMBINE\000\
  CREATE\000\
  TABLE\000\
  STREAM\000\
  FROM\000\
  SOCKET\000\
  FILE\000\
  PIPE\000\
  FIXEDWIDTH\000\
  DELIMITED\000\
  LINE\000\
  VARSIZE\000\
  OFFSET\000\
  ADJUSTBY\000\
  SETVALUE\000\
  PCUPDATE\000\
  PCVALUEUPDATE\000\
  PCELEMENTREMOVE\000\
  EXTERNALLAMBDA\000\
  INT\000\
  UNIT\000\
  FLOAT\000\
  COLLECTION\000\
  STRINGTYPE\000\
  CHAR\000\
  VARCHAR\000\
  DATE\000\
  IN\000\
  OUT\000\
  EOSTMT\000\
  EOF\000\
  LBRACE\000\
  RBRACE\000\
  BOUND\000\
  ARROW\000\
  "

let yynames_block = "\
  TYPE\000\
  INTEGER\000\
  ID\000\
  CONST_STRING\000\
  CONST_FLOAT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'relStatementList) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'mapDeclarationList) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'queryDeclarationList) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'patternDeclarationList) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'triggerList) in
    Obj.repr(
# 161 "src/parsers/K3parser.mly"
   ( let _ = _3 in
     (_1, (_2, !patterns), _5, !tl_queries) )
# 770 "src/parsers/K3parser.ml"
               :  K3.prog_t ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 :  K3.map_t ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'mapDeclarationList) in
    Obj.repr(
# 164 "src/parsers/K3parser.mly"
                                                            ( _1::_2 )
# 778 "src/parsers/K3parser.ml"
               : 'mapDeclarationList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 :  K3.map_t ) in
    Obj.repr(
# 165 "src/parsers/K3parser.mly"
                                                            ( [_1] )
# 785 "src/parsers/K3parser.ml"
               : 'mapDeclarationList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 10 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 8 : 'typeItem) in
    let _6 = (Parsing.peek_val __caml_parser_env 5 : 'varList) in
    let _9 = (Parsing.peek_val __caml_parser_env 2 : 'varList) in
    Obj.repr(
# 170 "src/parsers/K3parser.mly"
   ( let col = PC(_1, varType_to_varK3Type _6, 
                      varType_to_varK3Type _9, TBase(_3))
     in
        add_collection _1 col;
        create_map col)
# 799 "src/parsers/K3parser.ml"
               :  K3.map_t ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 9 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 7 : 'typeItem) in
    let _8 = (Parsing.peek_val __caml_parser_env 2 : 'varList) in
    Obj.repr(
# 176 "src/parsers/K3parser.mly"
   ( let col = OutPC(_1, varType_to_varK3Type _8, TBase(_3))
     in 
        add_collection _1 col;
        create_map col)
# 811 "src/parsers/K3parser.ml"
               :  K3.map_t ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 9 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 7 : 'typeItem) in
    let _6 = (Parsing.peek_val __caml_parser_env 4 : 'varList) in
    Obj.repr(
# 181 "src/parsers/K3parser.mly"
   ( let col = InPC(_1, varType_to_varK3Type _6, TBase(_3))
     in
        add_collection _1 col;
        create_map col)
# 823 "src/parsers/K3parser.ml"
               :  K3.map_t ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'typeItem) in
    Obj.repr(
# 186 "src/parsers/K3parser.mly"
   ( let col = SingletonPC(_1,TBase(_3))
     in
        add_collection _1 col;
        create_map col)
# 834 "src/parsers/K3parser.ml"
               :  K3.map_t ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'queryDeclaration) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'queryDeclarationList) in
    Obj.repr(
# 192 "src/parsers/K3parser.mly"
                                                            ( let _ = _1 in () )
# 842 "src/parsers/K3parser.ml"
               : 'queryDeclarationList))
; (fun __caml_parser_env ->
    Obj.repr(
# 193 "src/parsers/K3parser.mly"
                                                            ( () )
# 848 "src/parsers/K3parser.ml"
               : 'queryDeclarationList))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 :  K3.expr_t ) in
    Obj.repr(
# 196 "src/parsers/K3parser.mly"
                                                            ( add_tl _2 _4 )
# 856 "src/parsers/K3parser.ml"
               : 'queryDeclaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'patternDeclarationItem) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'patternDeclarationList) in
    Obj.repr(
# 200 "src/parsers/K3parser.mly"
   ( let _ = _1, _3 in () )
# 864 "src/parsers/K3parser.ml"
               : 'patternDeclarationList))
; (fun __caml_parser_env ->
    Obj.repr(
# 201 "src/parsers/K3parser.mly"
                                                            ( ())
# 870 "src/parsers/K3parser.ml"
               : 'patternDeclarationList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'patternList) in
    Obj.repr(
# 205 "src/parsers/K3parser.mly"
   ( must_infer_from_slice := false;
     let mapname = _1 in
     let patts = _3 in
     List.iter (
        fun p -> add_pattern mapname p
     ) patts
   )
# 884 "src/parsers/K3parser.ml"
               : 'patternDeclarationItem))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'patternItem) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'patternList) in
    Obj.repr(
# 214 "src/parsers/K3parser.mly"
                                                            ( _1::_3 )
# 892 "src/parsers/K3parser.ml"
               : 'patternList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'patternItem) in
    Obj.repr(
# 215 "src/parsers/K3parser.mly"
                                                            ( [_1] )
# 899 "src/parsers/K3parser.ml"
               : 'patternList))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'patternElementList) in
    Obj.repr(
# 218 "src/parsers/K3parser.mly"
                                                            ( Patterns.Out(_3) )
# 906 "src/parsers/K3parser.ml"
               : 'patternItem))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'patternElementList) in
    Obj.repr(
# 219 "src/parsers/K3parser.mly"
                                                            ( Patterns.In(_3) )
# 913 "src/parsers/K3parser.ml"
               : 'patternItem))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'patternElementItem) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'patternElementList) in
    Obj.repr(
# 223 "src/parsers/K3parser.mly"
   ( ( (fst _1)::(fst _3) ),  ( (snd _1)::(snd _3) ))
# 921 "src/parsers/K3parser.ml"
               : 'patternElementList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'patternElementItem) in
    Obj.repr(
# 225 "src/parsers/K3parser.mly"
   ( [fst _1], [snd _1] )
# 928 "src/parsers/K3parser.ml"
               : 'patternElementList))
; (fun __caml_parser_env ->
    Obj.repr(
# 226 "src/parsers/K3parser.mly"
   ( [], [] )
# 934 "src/parsers/K3parser.ml"
               : 'patternElementList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 229 "src/parsers/K3parser.mly"
                                                         ( _3, _1 )
# 942 "src/parsers/K3parser.ml"
               : 'patternElementItem))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'varItem) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'varList) in
    Obj.repr(
# 232 "src/parsers/K3parser.mly"
                                                         ( _1::_3 )
# 950 "src/parsers/K3parser.ml"
               : 'varList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'varItem) in
    Obj.repr(
# 233 "src/parsers/K3parser.mly"
                                                         ( [_1] )
# 957 "src/parsers/K3parser.ml"
               : 'varList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typeItem) in
    Obj.repr(
# 236 "src/parsers/K3parser.mly"
                                                         ( (_1, _3) )
# 965 "src/parsers/K3parser.ml"
               : 'varItem))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 237 "src/parsers/K3parser.mly"
                                                         ( (_1, Type.TInt) )
# 972 "src/parsers/K3parser.ml"
               : 'varItem))
; (fun __caml_parser_env ->
    Obj.repr(
# 240 "src/parsers/K3parser.mly"
                                                           ( Type.TInt )
# 978 "src/parsers/K3parser.ml"
               : 'typeItem))
; (fun __caml_parser_env ->
    Obj.repr(
# 241 "src/parsers/K3parser.mly"
                                                           ( Type.TFloat )
# 984 "src/parsers/K3parser.ml"
               : 'typeItem))
; (fun __caml_parser_env ->
    Obj.repr(
# 242 "src/parsers/K3parser.mly"
                                                           ( Type.TString )
# 990 "src/parsers/K3parser.ml"
               : 'typeItem))
; (fun __caml_parser_env ->
    Obj.repr(
# 243 "src/parsers/K3parser.mly"
                                                           ( Type.TDate )
# 996 "src/parsers/K3parser.ml"
               : 'typeItem))
; (fun __caml_parser_env ->
    Obj.repr(
# 248 "src/parsers/K3parser.mly"
   ( TBase(Type.TInt) )
# 1002 "src/parsers/K3parser.ml"
               : 'k3Type))
; (fun __caml_parser_env ->
    Obj.repr(
# 250 "src/parsers/K3parser.mly"
   ( TBase(Type.TFloat) )
# 1008 "src/parsers/K3parser.ml"
               : 'k3Type))
; (fun __caml_parser_env ->
    Obj.repr(
# 252 "src/parsers/K3parser.mly"
   ( TBase(Type.TDate) )
# 1014 "src/parsers/K3parser.ml"
               : 'k3Type))
; (fun __caml_parser_env ->
    Obj.repr(
# 254 "src/parsers/K3parser.mly"
   ( TBase(Type.TString) )
# 1020 "src/parsers/K3parser.ml"
               : 'k3Type))
; (fun __caml_parser_env ->
    Obj.repr(
# 255 "src/parsers/K3parser.mly"
                                                           ( TUnit )
# 1026 "src/parsers/K3parser.ml"
               : 'k3Type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'k3TypeList) in
    Obj.repr(
# 256 "src/parsers/K3parser.mly"
                                                           ( TTuple(_2) )
# 1033 "src/parsers/K3parser.ml"
               : 'k3Type))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'k3Type) in
    Obj.repr(
# 258 "src/parsers/K3parser.mly"
   ( Collection(Unknown, _3) )
# 1040 "src/parsers/K3parser.ml"
               : 'k3Type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'k3TypeList) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'k3Type) in
    Obj.repr(
# 259 "src/parsers/K3parser.mly"
                                                           ( Fn(_2, _5) )
# 1048 "src/parsers/K3parser.ml"
               : 'k3Type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'k3Type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'k3TypeList) in
    Obj.repr(
# 262 "src/parsers/K3parser.mly"
                                                           ( _1::_3 )
# 1056 "src/parsers/K3parser.ml"
               : 'k3TypeList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'k3Type) in
    Obj.repr(
# 263 "src/parsers/K3parser.mly"
                                                           ( [_1] )
# 1063 "src/parsers/K3parser.ml"
               : 'k3TypeList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'k3Type) in
    Obj.repr(
# 266 "src/parsers/K3parser.mly"
                                                           ( (_1, _3) )
# 1071 "src/parsers/K3parser.ml"
               : 'k3Var))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'k3Var) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'k3VarList) in
    Obj.repr(
# 269 "src/parsers/K3parser.mly"
                                                           ( _1::_3 )
# 1079 "src/parsers/K3parser.ml"
               : 'k3VarList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'k3Var) in
    Obj.repr(
# 270 "src/parsers/K3parser.mly"
                                                           ( [_1] )
# 1086 "src/parsers/K3parser.ml"
               : 'k3VarList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'trigger) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'triggerList) in
    Obj.repr(
# 276 "src/parsers/K3parser.mly"
                                                            ( _1::_2 )
# 1094 "src/parsers/K3parser.ml"
               : 'triggerList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'trigger) in
    Obj.repr(
# 277 "src/parsers/K3parser.mly"
                                                            ( [_1] )
# 1101 "src/parsers/K3parser.ml"
               : 'triggerList))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : 'triggerType) in
    let _3 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'varList) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'statementList) in
    Obj.repr(
# 281 "src/parsers/K3parser.mly"
   ( let args = _5 in
     let r = (_3, args,Schema.StreamRel) in
     let ev = 
        if _2 
        then Schema.InsertEvent(r)
        else Schema.DeleteEvent(r)
     in
        (ev, _8) )
# 1118 "src/parsers/K3parser.ml"
               : 'trigger))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : 'triggerType) in
    let _3 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'varList) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'statementList) in
    Obj.repr(
# 290 "src/parsers/K3parser.mly"
   ( let args = _5 in
     let r = (_3, args,Schema.StreamRel) in
     let ev = 
        if _2 
        then Schema.InsertEvent(r)
        else Schema.DeleteEvent(r)
     in
        (ev, _8) )
# 1135 "src/parsers/K3parser.ml"
               : 'trigger))
; (fun __caml_parser_env ->
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'statementList) in
    Obj.repr(
# 299 "src/parsers/K3parser.mly"
   ( (Schema.SystemInitializedEvent, _5) )
# 1142 "src/parsers/K3parser.ml"
               : 'trigger))
; (fun __caml_parser_env ->
    Obj.repr(
# 302 "src/parsers/K3parser.mly"
                                                            ( true )
# 1148 "src/parsers/K3parser.ml"
               : 'triggerType))
; (fun __caml_parser_env ->
    Obj.repr(
# 303 "src/parsers/K3parser.mly"
                                                            ( false )
# 1154 "src/parsers/K3parser.ml"
               : 'triggerType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 :  K3.expr_t ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'statementList) in
    Obj.repr(
# 306 "src/parsers/K3parser.mly"
                                                            ( _1::_3 )
# 1162 "src/parsers/K3parser.ml"
               : 'statementList))
; (fun __caml_parser_env ->
    Obj.repr(
# 307 "src/parsers/K3parser.mly"
                                                            ( [] )
# 1168 "src/parsers/K3parser.ml"
               : 'statementList))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 :  K3.expr_t ) in
    Obj.repr(
# 310 "src/parsers/K3parser.mly"
                                                            ( _2 )
# 1175 "src/parsers/K3parser.ml"
               :  K3.expr_t ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'constStatement) in
    Obj.repr(
# 311 "src/parsers/K3parser.mly"
                                                            ( _1 )
# 1182 "src/parsers/K3parser.ml"
               :  K3.expr_t ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'varStatement) in
    Obj.repr(
# 312 "src/parsers/K3parser.mly"
                                                            ( _1 )
# 1189 "src/parsers/K3parser.ml"
               :  K3.expr_t ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tupleStatement) in
    Obj.repr(
# 313 "src/parsers/K3parser.mly"
                                                            ( _1 )
# 1196 "src/parsers/K3parser.ml"
               :  K3.expr_t ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'arithmeticStatement) in
    Obj.repr(
# 314 "src/parsers/K3parser.mly"
                                                            ( _1 )
# 1203 "src/parsers/K3parser.ml"
               :  K3.expr_t ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ifThenStatement) in
    Obj.repr(
# 315 "src/parsers/K3parser.mly"
                                                            ( _1 )
# 1210 "src/parsers/K3parser.ml"
               :  K3.expr_t ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ifThenElseStatement) in
    Obj.repr(
# 316 "src/parsers/K3parser.mly"
                                                            ( _1 )
# 1217 "src/parsers/K3parser.ml"
               :  K3.expr_t ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'blockStatement) in
    Obj.repr(
# 317 "src/parsers/K3parser.mly"
                                                            ( _1 )
# 1224 "src/parsers/K3parser.ml"
               :  K3.expr_t ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'iterateStatement) in
    Obj.repr(
# 318 "src/parsers/K3parser.mly"
                                                            ( _1 )
# 1231 "src/parsers/K3parser.ml"
               :  K3.expr_t ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'lambdaStatement) in
    Obj.repr(
# 319 "src/parsers/K3parser.mly"
                                                            ( _1 )
# 1238 "src/parsers/K3parser.ml"
               :  K3.expr_t ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'assLmbdStatement) in
    Obj.repr(
# 320 "src/parsers/K3parser.mly"
                                                            ( _1 )
# 1245 "src/parsers/K3parser.ml"
               :  K3.expr_t ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'applyStatement) in
    Obj.repr(
# 321 "src/parsers/K3parser.mly"
                                                            ( _1 )
# 1252 "src/parsers/K3parser.ml"
               :  K3.expr_t ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'mapStatement) in
    Obj.repr(
# 322 "src/parsers/K3parser.mly"
                                                            ( _1 )
# 1259 "src/parsers/K3parser.ml"
               :  K3.expr_t ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'flattenStatement) in
    Obj.repr(
# 323 "src/parsers/K3parser.mly"
                                                            ( _1 )
# 1266 "src/parsers/K3parser.ml"
               :  K3.expr_t ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'aggregateStatement) in
    Obj.repr(
# 324 "src/parsers/K3parser.mly"
                                                            ( _1 )
# 1273 "src/parsers/K3parser.ml"
               :  K3.expr_t ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'grpByAggStatement) in
    Obj.repr(
# 325 "src/parsers/K3parser.mly"
                                                            ( _1 )
# 1280 "src/parsers/K3parser.ml"
               :  K3.expr_t ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'memberStatement) in
    Obj.repr(
# 326 "src/parsers/K3parser.mly"
                                                            ( _1 )
# 1287 "src/parsers/K3parser.ml"
               :  K3.expr_t ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'lookupStatement) in
    Obj.repr(
# 327 "src/parsers/K3parser.mly"
                                                            ( _1 )
# 1294 "src/parsers/K3parser.ml"
               :  K3.expr_t ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'sliceStatement) in
    Obj.repr(
# 328 "src/parsers/K3parser.mly"
                                                            ( _1 )
# 1301 "src/parsers/K3parser.ml"
               :  K3.expr_t ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'filterStatement) in
    Obj.repr(
# 329 "src/parsers/K3parser.mly"
                                                            ( _1 )
# 1308 "src/parsers/K3parser.ml"
               :  K3.expr_t ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'collectionStatement) in
    Obj.repr(
# 330 "src/parsers/K3parser.mly"
                                                            ( _1 )
# 1315 "src/parsers/K3parser.ml"
               :  K3.expr_t ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pcUpdateStatement) in
    Obj.repr(
# 331 "src/parsers/K3parser.mly"
                                                            ( _1 )
# 1322 "src/parsers/K3parser.ml"
               :  K3.expr_t ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pcValueUpdateStatement) in
    Obj.repr(
# 332 "src/parsers/K3parser.mly"
                                                            ( _1 )
# 1329 "src/parsers/K3parser.ml"
               :  K3.expr_t ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pcElementRemoveStatement) in
    Obj.repr(
# 333 "src/parsers/K3parser.mly"
                                                            ( _1 )
# 1336 "src/parsers/K3parser.ml"
               :  K3.expr_t ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'singletonStatement) in
    Obj.repr(
# 334 "src/parsers/K3parser.mly"
                                                            ( _1 )
# 1343 "src/parsers/K3parser.ml"
               :  K3.expr_t ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'combineStatement) in
    Obj.repr(
# 335 "src/parsers/K3parser.mly"
                                                            ( _1 )
# 1350 "src/parsers/K3parser.ml"
               :  K3.expr_t ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'externalLambdaStatement) in
    Obj.repr(
# 336 "src/parsers/K3parser.mly"
                                                            ( _1 )
# 1357 "src/parsers/K3parser.ml"
               :  K3.expr_t ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 340 "src/parsers/K3parser.mly"
   ( Const(Constants.CFloat(_1)) )
# 1364 "src/parsers/K3parser.ml"
               : 'constStatement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 342 "src/parsers/K3parser.mly"
   ( Const(Constants.CInt(_1)) )
# 1371 "src/parsers/K3parser.ml"
               : 'constStatement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 344 "src/parsers/K3parser.mly"
   ( Const(CString(_1)) )
# 1378 "src/parsers/K3parser.ml"
               : 'constStatement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 346 "src/parsers/K3parser.mly"
   ( Const(Constants.parse_date _3) )
# 1385 "src/parsers/K3parser.ml"
               : 'constStatement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'k3Type) in
    Obj.repr(
# 349 "src/parsers/K3parser.mly"
                    ( Var(_1, _3 ) )
# 1393 "src/parsers/K3parser.ml"
               : 'varStatement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 350 "src/parsers/K3parser.mly"
                    ( Var(_1, TBase(Type.TInt)) )
# 1400 "src/parsers/K3parser.ml"
               : 'varStatement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'statementElementList) in
    Obj.repr(
# 353 "src/parsers/K3parser.mly"
                                                            ( Tuple(_2) )
# 1407 "src/parsers/K3parser.ml"
               : 'tupleStatement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 :  K3.expr_t ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'statementElementList) in
    Obj.repr(
# 356 "src/parsers/K3parser.mly"
                                                            ( _1::_3 )
# 1415 "src/parsers/K3parser.ml"
               : 'statementElementList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 :  K3.expr_t ) in
    Obj.repr(
# 357 "src/parsers/K3parser.mly"
                                                            ( [_1] )
# 1422 "src/parsers/K3parser.ml"
               : 'statementElementList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 :  K3.expr_t ) in
    Obj.repr(
# 358 "src/parsers/K3parser.mly"
                                                            ( [_1] )
# 1429 "src/parsers/K3parser.ml"
               : 'statementElementList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 :  K3.expr_t ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 :  K3.expr_t ) in
    Obj.repr(
# 361 "src/parsers/K3parser.mly"
                                                            ( Add(_1, _3) )
# 1437 "src/parsers/K3parser.ml"
               : 'arithmeticStatement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 :  K3.expr_t ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 :  K3.expr_t ) in
    Obj.repr(
# 362 "src/parsers/K3parser.mly"
                                                            ( Mult(_1, _3) )
# 1445 "src/parsers/K3parser.ml"
               : 'arithmeticStatement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 :  K3.expr_t ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 :  K3.expr_t ) in
    Obj.repr(
# 363 "src/parsers/K3parser.mly"
                                                            ( Eq(_1, _3) )
# 1453 "src/parsers/K3parser.ml"
               : 'arithmeticStatement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 :  K3.expr_t ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 :  K3.expr_t ) in
    Obj.repr(
# 364 "src/parsers/K3parser.mly"
                                                            ( Neq(_1, _3) )
# 1461 "src/parsers/K3parser.ml"
               : 'arithmeticStatement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 :  K3.expr_t ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 :  K3.expr_t ) in
    Obj.repr(
# 365 "src/parsers/K3parser.mly"
                                                            ( Lt(_1, _3) )
# 1469 "src/parsers/K3parser.ml"
               : 'arithmeticStatement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 :  K3.expr_t ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 :  K3.expr_t ) in
    Obj.repr(
# 366 "src/parsers/K3parser.mly"
                                                            ( Leq(_1, _3) )
# 1477 "src/parsers/K3parser.ml"
               : 'arithmeticStatement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 :  K3.expr_t ) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 :  K3.expr_t ) in
    Obj.repr(
# 370 "src/parsers/K3parser.mly"
   ( IfThenElse0(_3, _5) )
# 1485 "src/parsers/K3parser.ml"
               : 'ifThenStatement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 :  K3.expr_t ) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 :  K3.expr_t ) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 :  K3.expr_t ) in
    Obj.repr(
# 374 "src/parsers/K3parser.mly"
   ( IfThenElse(_3, _5, _7) )
# 1494 "src/parsers/K3parser.ml"
               : 'ifThenElseStatement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'statementElementList) in
    Obj.repr(
# 377 "src/parsers/K3parser.mly"
                                                            ( Block(_2) )
# 1501 "src/parsers/K3parser.ml"
               : 'blockStatement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 :  K3.expr_t ) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 :  K3.expr_t ) in
    Obj.repr(
# 380 "src/parsers/K3parser.mly"
                                                            ( Iterate(_3, _5) )
# 1509 "src/parsers/K3parser.ml"
               : 'iterateStatement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'lambdaArgument) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 :  K3.expr_t ) in
    Obj.repr(
# 383 "src/parsers/K3parser.mly"
                                                              ( Lambda(_3, _6) )
# 1517 "src/parsers/K3parser.ml"
               : 'lambdaStatement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'k3Var) in
    Obj.repr(
# 387 "src/parsers/K3parser.mly"
   ( AVar(fst _1, snd _1) )
# 1524 "src/parsers/K3parser.ml"
               : 'lambdaArgument))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'k3VarList) in
    Obj.repr(
# 388 "src/parsers/K3parser.mly"
                                                            ( ATuple(_2) )
# 1531 "src/parsers/K3parser.ml"
               : 'lambdaArgument))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'lambdaArgument) in
    Obj.repr(
# 389 "src/parsers/K3parser.mly"
                                                            ( _2 )
# 1538 "src/parsers/K3parser.ml"
               : 'lambdaArgument))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'lambdaArgument) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'lambdaArgument) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 :  K3.expr_t ) in
    Obj.repr(
# 394 "src/parsers/K3parser.mly"
   ( AssocLambda(_3, _5, _8) )
# 1547 "src/parsers/K3parser.ml"
               : 'assLmbdStatement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 :  K3.expr_t ) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 :  K3.expr_t ) in
    Obj.repr(
# 397 "src/parsers/K3parser.mly"
                                                            ( Apply(_3, _5) )
# 1555 "src/parsers/K3parser.ml"
               : 'applyStatement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 :  K3.expr_t ) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 :  K3.expr_t ) in
    Obj.repr(
# 400 "src/parsers/K3parser.mly"
                                                            ( Map(_3, _5) )
# 1563 "src/parsers/K3parser.ml"
               : 'mapStatement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 :  K3.expr_t ) in
    Obj.repr(
# 403 "src/parsers/K3parser.mly"
                                                            ( Flatten(_3) )
# 1570 "src/parsers/K3parser.ml"
               : 'flattenStatement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 :  K3.expr_t ) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 :  K3.expr_t ) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 :  K3.expr_t ) in
    Obj.repr(
# 407 "src/parsers/K3parser.mly"
   ( Aggregate(_3, _5, _7) )
# 1579 "src/parsers/K3parser.ml"
               : 'aggregateStatement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 7 :  K3.expr_t ) in
    let _5 = (Parsing.peek_val __caml_parser_env 5 :  K3.expr_t ) in
    let _7 = (Parsing.peek_val __caml_parser_env 3 :  K3.expr_t ) in
    let _9 = (Parsing.peek_val __caml_parser_env 1 :  K3.expr_t ) in
    Obj.repr(
# 412 "src/parsers/K3parser.mly"
   ( GroupByAggregate(_3, _5, _7, _9) )
# 1589 "src/parsers/K3parser.ml"
               : 'grpByAggStatement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 :  K3.expr_t ) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'statementElementList) in
    Obj.repr(
# 416 "src/parsers/K3parser.mly"
                                                            ( Member(_3, _6) )
# 1597 "src/parsers/K3parser.ml"
               : 'memberStatement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 :  K3.expr_t ) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'statementElementList) in
    Obj.repr(
# 420 "src/parsers/K3parser.mly"
                                                            ( Lookup(_3, _6) )
# 1605 "src/parsers/K3parser.ml"
               : 'lookupStatement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 :  K3.expr_t ) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'varBindList) in
    Obj.repr(
# 425 "src/parsers/K3parser.mly"
   ( let var_list = slice_infering _3 _6 in
     Slice(_3, var_list, _6) )
# 1614 "src/parsers/K3parser.ml"
               : 'sliceStatement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 :  K3.expr_t ) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 :  K3.expr_t ) in
    Obj.repr(
# 429 "src/parsers/K3parser.mly"
                                                            ( Map(_3, _5) )
# 1622 "src/parsers/K3parser.ml"
               : 'filterStatement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'varBindItem) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'varBindList) in
    Obj.repr(
# 432 "src/parsers/K3parser.mly"
                                                            ( _1::_3 )
# 1630 "src/parsers/K3parser.ml"
               : 'varBindList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'varBindItem) in
    Obj.repr(
# 433 "src/parsers/K3parser.mly"
                                                            ( [_1] )
# 1637 "src/parsers/K3parser.ml"
               : 'varBindList))
; (fun __caml_parser_env ->
    Obj.repr(
# 434 "src/parsers/K3parser.mly"
                                                            ( [] )
# 1643 "src/parsers/K3parser.ml"
               : 'varBindList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 :  K3.expr_t ) in
    Obj.repr(
# 437 "src/parsers/K3parser.mly"
                                                            ( (_1, _3) )
# 1651 "src/parsers/K3parser.ml"
               : 'varBindItem))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 441 "src/parsers/K3parser.mly"
   ( get_collection _2 )
# 1658 "src/parsers/K3parser.ml"
               : 'collectionStatement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 7 :  K3.expr_t ) in
    let _6 = (Parsing.peek_val __caml_parser_env 4 : 'statementElementListOpt) in
    let _9 = (Parsing.peek_val __caml_parser_env 1 :  K3.expr_t ) in
    Obj.repr(
# 446 "src/parsers/K3parser.mly"
   ( PCUpdate(_3, _6, _9) )
# 1667 "src/parsers/K3parser.ml"
               : 'pcUpdateStatement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 9 :  K3.expr_t ) in
    let _6 = (Parsing.peek_val __caml_parser_env 6 : 'statementElementListOpt) in
    let _10 = (Parsing.peek_val __caml_parser_env 2 : 'statementElementListOpt) in
    Obj.repr(
# 451 "src/parsers/K3parser.mly"
   ( PCElementRemove(_3, _6, _10) )
# 1676 "src/parsers/K3parser.ml"
               : 'pcElementRemoveStatement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 11 :  K3.expr_t ) in
    let _6 = (Parsing.peek_val __caml_parser_env 8 : 'statementElementListOpt) in
    let _10 = (Parsing.peek_val __caml_parser_env 4 : 'statementElementListOpt) in
    let _13 = (Parsing.peek_val __caml_parser_env 1 :  K3.expr_t ) in
    Obj.repr(
# 457 "src/parsers/K3parser.mly"
   ( PCValueUpdate(_3, _6, _10, _13) )
# 1686 "src/parsers/K3parser.ml"
               : 'pcValueUpdateStatement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 :  K3.expr_t ) in
    Obj.repr(
# 460 "src/parsers/K3parser.mly"
                                                            ( Singleton(_3) )
# 1693 "src/parsers/K3parser.ml"
               : 'singletonStatement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'statementElementList) in
    Obj.repr(
# 463 "src/parsers/K3parser.mly"
                                                            ( Combine(_3) )
# 1700 "src/parsers/K3parser.ml"
               : 'combineStatement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'lambdaArgument) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'typeItem) in
    Obj.repr(
# 467 "src/parsers/K3parser.mly"
    ( ExternalLambda(_3, _5, TBase(_7)) )
# 1709 "src/parsers/K3parser.ml"
               : 'externalLambdaStatement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'statementElementList) in
    Obj.repr(
# 470 "src/parsers/K3parser.mly"
                                                            ( _1 )
# 1716 "src/parsers/K3parser.ml"
               : 'statementElementListOpt))
; (fun __caml_parser_env ->
    Obj.repr(
# 471 "src/parsers/K3parser.mly"
                                                            ( [] )
# 1722 "src/parsers/K3parser.ml"
               : 'statementElementListOpt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'relStatement) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'relStatementList) in
    Obj.repr(
# 475 "src/parsers/K3parser.mly"
    ( addSchema _1 _3 )
# 1730 "src/parsers/K3parser.ml"
               : 'relStatementList))
; (fun __caml_parser_env ->
    Obj.repr(
# 476 "src/parsers/K3parser.mly"
    ( Schema.empty_db () )
# 1736 "src/parsers/K3parser.ml"
               : 'relStatementList))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'tableOrStream) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'emptyFieldList) in
    Obj.repr(
# 480 "src/parsers/K3parser.mly"
   ( (String.uppercase _3, _5, _2, Schema.NoSource, ("",[])) )
# 1745 "src/parsers/K3parser.ml"
               : 'relStatement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'tableOrStream) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'emptyFieldList) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'sourceStmt) in
    Obj.repr(
# 482 "src/parsers/K3parser.mly"
   ( (String.uppercase _3, _5, _2, fst _8, snd _8) )
# 1755 "src/parsers/K3parser.ml"
               : 'relStatement))
; (fun __caml_parser_env ->
    Obj.repr(
# 485 "src/parsers/K3parser.mly"
         ( Schema.TableRel  )
# 1761 "src/parsers/K3parser.ml"
               : 'tableOrStream))
; (fun __caml_parser_env ->
    Obj.repr(
# 486 "src/parsers/K3parser.mly"
         ( Schema.StreamRel )
# 1767 "src/parsers/K3parser.ml"
               : 'tableOrStream))
; (fun __caml_parser_env ->
    Obj.repr(
# 489 "src/parsers/K3parser.mly"
                              ( [] )
# 1773 "src/parsers/K3parser.ml"
               : 'emptyFieldList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fieldList) in
    Obj.repr(
# 490 "src/parsers/K3parser.mly"
                              ( _1 )
# 1780 "src/parsers/K3parser.ml"
               : 'emptyFieldList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'dbtType) in
    Obj.repr(
# 493 "src/parsers/K3parser.mly"
                              ( [_1,_2] )
# 1788 "src/parsers/K3parser.ml"
               : 'fieldList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'dbtType) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'fieldList) in
    Obj.repr(
# 494 "src/parsers/K3parser.mly"
                              ( (_1,_2)::_4 )
# 1797 "src/parsers/K3parser.ml"
               : 'fieldList))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'bytestreamParams) in
    Obj.repr(
# 498 "src/parsers/K3parser.mly"
  ( (Schema.FileSource(_2, fst _3), snd _3) )
# 1805 "src/parsers/K3parser.ml"
               : 'sourceStmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : int) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'bytestreamParams) in
    Obj.repr(
# 500 "src/parsers/K3parser.mly"
  ( (Schema.SocketSource(Unix.inet_addr_of_string _2, _3, fst _4), snd _4) )
# 1814 "src/parsers/K3parser.ml"
               : 'sourceStmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'bytestreamParams) in
    Obj.repr(
# 502 "src/parsers/K3parser.mly"
  ( (Schema.SocketSource(Unix.inet_addr_any, _2, fst _3), snd _3) )
# 1822 "src/parsers/K3parser.ml"
               : 'sourceStmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'framingStmt) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'adaptorStmt) in
    Obj.repr(
# 505 "src/parsers/K3parser.mly"
                            ( (_1, _2) )
# 1830 "src/parsers/K3parser.ml"
               : 'bytestreamParams))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 508 "src/parsers/K3parser.mly"
                                        ( Schema.FixedSize(_2) )
# 1837 "src/parsers/K3parser.ml"
               : 'framingStmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 509 "src/parsers/K3parser.mly"
                                    ( Schema.Delimited("\n") )
# 1843 "src/parsers/K3parser.ml"
               : 'framingStmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 510 "src/parsers/K3parser.mly"
                                          ( Schema.Delimited(_1) )
# 1850 "src/parsers/K3parser.ml"
               : 'framingStmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 513 "src/parsers/K3parser.mly"
                                   ( (String.lowercase _1, []) )
# 1857 "src/parsers/K3parser.ml"
               : 'adaptorStmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'adaptorParams) in
    Obj.repr(
# 514 "src/parsers/K3parser.mly"
                                   ( (String.lowercase _1, _3) )
# 1865 "src/parsers/K3parser.ml"
               : 'adaptorStmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 515 "src/parsers/K3parser.mly"
                                   ( (String.lowercase _1, []) )
# 1872 "src/parsers/K3parser.ml"
               : 'adaptorStmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 519 "src/parsers/K3parser.mly"
   ( [(String.lowercase _1,_3)] )
# 1880 "src/parsers/K3parser.ml"
               : 'adaptorParams))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'adaptorParams) in
    Obj.repr(
# 521 "src/parsers/K3parser.mly"
   ( (String.lowercase _1,_3)::_5 )
# 1889 "src/parsers/K3parser.ml"
               : 'adaptorParams))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Type.type_t) in
    Obj.repr(
# 524 "src/parsers/K3parser.mly"
                                ( _1 )
# 1896 "src/parsers/K3parser.ml"
               : 'dbtType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typeItem) in
    Obj.repr(
# 525 "src/parsers/K3parser.mly"
                                ( _1 )
# 1903 "src/parsers/K3parser.ml"
               : 'dbtType))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 526 "src/parsers/K3parser.mly"
                                ( TString )
# 1910 "src/parsers/K3parser.ml"
               : 'dbtType))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 527 "src/parsers/K3parser.mly"
                                ( TString )
# 1917 "src/parsers/K3parser.ml"
               : 'dbtType))
; (fun __caml_parser_env ->
    Obj.repr(
# 528 "src/parsers/K3parser.mly"
                                ( TString )
# 1923 "src/parsers/K3parser.ml"
               : 'dbtType))
; (fun __caml_parser_env ->
    Obj.repr(
# 529 "src/parsers/K3parser.mly"
                                ( TString )
# 1929 "src/parsers/K3parser.ml"
               : 'dbtType))
; (fun __caml_parser_env ->
    Obj.repr(
# 530 "src/parsers/K3parser.mly"
                                ( TDate   )
# 1935 "src/parsers/K3parser.ml"
               : 'dbtType))
(* Entry dbtoasterK3Program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry statement *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry mapDeclaration *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let dbtoasterK3Program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf :  K3.prog_t )
let statement (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 2 lexfun lexbuf :  K3.expr_t )
let mapDeclaration (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 3 lexfun lexbuf :  K3.map_t )
