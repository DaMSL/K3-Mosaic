# 1 "src/parsers/K3lexer.mll"
    
open K3parser   
open Lexing   

let init_line lexbuf =
    let pos = lexbuf.Lexing.lex_curr_p in
        lexbuf.Lexing.lex_curr_p <- { pos with
            Lexing.pos_lnum = 1;
            Lexing.pos_bol = 0;
        }

let advance_line lexbuf =
    let pos = lexbuf.Lexing.lex_curr_p in
        lexbuf.Lexing.lex_curr_p <- { pos with
            Lexing.pos_lnum = pos.Lexing.pos_lnum + 1;
            Lexing.pos_bol = pos.Lexing.pos_cnum;
        }

let hashtbl_of_pair_list h l =
    List.iter (fun (p1, p2) -> Hashtbl.add h p1 p2) l

let keyword_table = Hashtbl.create 35
let keywords =   
   [   
         "ON", ON;
         "SYSTEM", SYSTEM;
         "READY", READY;
         "QUERY", QUERY;
         "IF", IF;
         "ELSE", ELSE;
         "IF0", IF0;
         "ITERATE", ITERATE;
         "LAMBDA", LAMBDA;
         "APPLY", APPLY;
         "MAP", MAP;
         "FLATTEN", FLATTEN;
         "AGGREGATE", AGGREGATE;
         "GROUPBYAGGREGATE", GROUPBYAGGREGATE;
         "MEMBER", MEMBER;
         "LOOKUP", LOOKUP;
         "SLICE", SLICE;
         "FILTER", FILTER;
         "PCUPDATE", PCUPDATE;
         "PCVALUEUPDATE", PCVALUEUPDATE;
         "PCELEMENTREMOVE", PCELEMENTREMOVE;
         "INT", INT;
         "UNIT", UNIT;
         "FLOAT", FLOAT;
         "COLLECTION", COLLECTION;
         "IN", IN;
         "OUT", OUT;
         "SINGLETON", SINGLETON;
         "COMBINE", COMBINE;
      
         "CREATE", CREATE;
         "TABLE", TABLE;
         "STREAM", STREAM;
         "FROM", FROM;
         "SOCKET", SOCKET;
         "FILE", FILE;
         "PIPE", PIPE;
         "FIXEDWIDTH", FIXEDWIDTH;
         "DELIMITED", DELIMITED;
         "LINE", LINE;
         "VARSIZE", VARSIZE;
         "OFFSET", OFFSET;
         "ADJUSTBY", ADJUSTBY;
         "VARCHAR",    VARCHAR;
         "CHAR",       CHAR;
         "DATE",       DATE;
         "STRING", STRINGTYPE;
         "INTEGER", TYPE(Type.TInt);
         "DOUBLE", TYPE(Type.TFloat);
         "DECIMAL", TYPE(Type.TFloat);
         "EXTERNALLAMBDA", EXTERNALLAMBDA;
   ]
let _ = hashtbl_of_pair_list keyword_table keywords

let ops_table = Hashtbl.create 11
let ops =
    [   
        "==",   EQ;
        "!=",   NE;
        "<",    LT;   
        "<=",   LE;  
        "+",    SUM;
        "*",    PRODUCT;
        ">",    GT;
        "-",    MINUS;
    ]
let _ = hashtbl_of_pair_list ops_table ops
    

# 96 "src/parsers/K3lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\233\255\004\000\236\255\238\255\239\255\240\255\241\255\
    \242\255\243\255\244\255\245\255\024\000\001\000\078\000\216\000\
    \248\255\003\000\031\000\033\000\075\000\153\000\165\000\178\000\
    \254\255\001\000\255\255\002\000\250\255\193\000\037\001\251\255\
    \249\255\246\255\234\255\127\000\252\255\253\255\049\000\082\000\
    \255\255\254\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\008\000\
    \255\255\255\255\007\000\018\000\255\255\007\000\002\000\007\000\
    \255\255\001\000\255\255\020\000\255\255\003\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\003\000\003\000\
    \255\255\255\255";
  Lexing.lex_default = 
   "\255\255\000\000\255\255\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\012\000\013\000\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\000\000\027\000\000\000\255\255\255\255\000\000\
    \000\000\000\000\000\000\036\000\000\000\000\000\255\255\255\255\
    \000\000\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\026\000\025\000\000\000\255\255\024\000\024\000\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \026\000\017\000\013\000\033\000\003\000\000\000\000\000\012\000\
    \010\000\009\000\016\000\021\000\011\000\023\000\034\000\002\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\019\000\004\000\018\000\020\000\016\000\033\000\
    \016\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\008\000\016\000\007\000\032\000\014\000\
    \041\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\006\000\040\000\005\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \016\000\031\000\000\000\000\000\000\000\000\000\000\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\038\000\000\000\000\000\000\000\014\000\039\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\029\000\000\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\027\000\
    \000\000\000\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\000\000\000\000\000\000\000\000\
    \028\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\000\000\000\000\000\000\000\000\000\000\
    \001\000\255\255\255\255\000\000\000\000\000\000\000\000\000\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \255\255\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\000\000\000\000\000\000\000\000\015\000\
    \000\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\029\000\000\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\037\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\027\000\000\000\025\000\027\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\013\000\000\000\255\255\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\000\
    \017\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\018\000\000\000\019\000\000\000\
    \038\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\039\000\000\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \020\000\020\000\255\255\255\255\255\255\255\255\255\255\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\035\000\255\255\255\255\255\255\014\000\035\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\022\000\255\255\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\023\000\
    \255\255\255\255\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\255\255\255\255\255\255\255\255\
    \023\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\255\255\255\255\255\255\255\255\255\255\
    \000\000\013\000\027\000\255\255\255\255\255\255\255\255\255\255\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \012\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\255\255\255\255\255\255\255\255\015\000\
    \255\255\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\030\000\255\255\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\035\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec tokenize lexbuf =
    __ocaml_lex_tokenize_rec lexbuf 0
and __ocaml_lex_tokenize_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 114 "src/parsers/K3lexer.mll"
                ( tokenize lexbuf )
# 280 "src/parsers/K3lexer.ml"

  | 1 ->
# 115 "src/parsers/K3lexer.mll"
                ( advance_line lexbuf; tokenize lexbuf )
# 285 "src/parsers/K3lexer.ml"

  | 2 ->
# 116 "src/parsers/K3lexer.mll"
                ( INTEGER(int_of_string (lexeme lexbuf)) )
# 290 "src/parsers/K3lexer.ml"

  | 3 ->
# 117 "src/parsers/K3lexer.mll"
                ( CONST_FLOAT(float_of_string (lexeme lexbuf))  )
# 295 "src/parsers/K3lexer.ml"

  | 4 ->
# 118 "src/parsers/K3lexer.mll"
                ( BOUND )
# 300 "src/parsers/K3lexer.ml"

  | 5 ->
# 119 "src/parsers/K3lexer.mll"
                ( ARROW )
# 305 "src/parsers/K3lexer.ml"

  | 6 ->
# 120 "src/parsers/K3lexer.mll"
                ( SETVALUE )
# 310 "src/parsers/K3lexer.ml"

  | 7 ->
# 122 "src/parsers/K3lexer.mll"
                ( let op_str = lexeme lexbuf in
                      try Hashtbl.find ops_table op_str
                      with Not_found -> 
                          raise (Failure ("unknown operator "^(op_str)))
                )
# 319 "src/parsers/K3lexer.ml"

  | 8 ->
# 127 "src/parsers/K3lexer.mll"
                ( 
                  let keyword_str = lexeme lexbuf in
                  let keyword_str_uc = String.uppercase keyword_str in
                      try Hashtbl.find keyword_table keyword_str_uc
                      with Not_found -> ID(keyword_str)
                )
# 329 "src/parsers/K3lexer.ml"

  | 9 ->
# 133 "src/parsers/K3lexer.mll"
                ( let s = lexeme lexbuf in 
                      CONST_STRING(String.sub s 1 ((String.length s)-2)) 
                )
# 336 "src/parsers/K3lexer.ml"

  | 10 ->
# 136 "src/parsers/K3lexer.mll"
                ( COMMA )
# 341 "src/parsers/K3lexer.ml"

  | 11 ->
# 137 "src/parsers/K3lexer.mll"
                ( LPAREN )
# 346 "src/parsers/K3lexer.ml"

  | 12 ->
# 138 "src/parsers/K3lexer.mll"
                ( RPAREN )
# 351 "src/parsers/K3lexer.ml"

  | 13 ->
# 139 "src/parsers/K3lexer.mll"
                ( LBRACK )
# 356 "src/parsers/K3lexer.ml"

  | 14 ->
# 140 "src/parsers/K3lexer.mll"
                ( RBRACK )
# 361 "src/parsers/K3lexer.ml"

  | 15 ->
# 141 "src/parsers/K3lexer.mll"
                ( LBRACE )
# 366 "src/parsers/K3lexer.ml"

  | 16 ->
# 142 "src/parsers/K3lexer.mll"
                ( RBRACE )
# 371 "src/parsers/K3lexer.ml"

  | 17 ->
# 143 "src/parsers/K3lexer.mll"
                ( EOSTMT )
# 376 "src/parsers/K3lexer.ml"

  | 18 ->
# 144 "src/parsers/K3lexer.mll"
                ( COLON )
# 381 "src/parsers/K3lexer.ml"

  | 19 ->
# 145 "src/parsers/K3lexer.mll"
                ( DOLLAR )
# 386 "src/parsers/K3lexer.ml"

  | 20 ->
# 146 "src/parsers/K3lexer.mll"
                ( tokenize lexbuf)
# 391 "src/parsers/K3lexer.ml"

  | 21 ->
# 147 "src/parsers/K3lexer.mll"
                ( comment 1 lexbuf )
# 396 "src/parsers/K3lexer.ml"

  | 22 ->
# 148 "src/parsers/K3lexer.mll"
                ( EOF )
# 401 "src/parsers/K3lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_tokenize_rec lexbuf __ocaml_lex_state

and comment depth lexbuf =
    __ocaml_lex_comment_rec depth lexbuf 35
and __ocaml_lex_comment_rec depth lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 151 "src/parsers/K3lexer.mll"
                ( raise (Failure ("nested comments are invalid")) )
# 412 "src/parsers/K3lexer.ml"

  | 1 ->
# 152 "src/parsers/K3lexer.mll"
                ( tokenize lexbuf )
# 417 "src/parsers/K3lexer.ml"

  | 2 ->
# 153 "src/parsers/K3lexer.mll"
                ( raise (Failure ("hit end of file in a comment")) )
# 422 "src/parsers/K3lexer.ml"

  | 3 ->
# 154 "src/parsers/K3lexer.mll"
                ( comment depth lexbuf )
# 427 "src/parsers/K3lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_comment_rec depth lexbuf __ocaml_lex_state

;;

