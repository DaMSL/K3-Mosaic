type token =
  | TYPE of (Type.type_t)
  | ID of (string)
  | STRING of (string)
  | INT of (int)
  | FLOAT of (float)
  | DATE
  | CHAR
  | VARCHAR
  | TRUE
  | FALSE
  | EQ
  | NE
  | LT
  | LE
  | GT
  | GE
  | SUM
  | MINUS
  | PRODUCT
  | DIVIDE
  | AND
  | OR
  | NOT
  | BETWEEN
  | LIKE
  | COMMA
  | LPAREN
  | RPAREN
  | PERIOD
  | AS
  | JOIN
  | INNER
  | OUTER
  | LEFT
  | RIGHT
  | ON
  | NATURAL
  | EXISTS
  | IN
  | SOME
  | ALL
  | UNION
  | CREATE
  | TABLE
  | FROM
  | USING
  | SELECT
  | WHERE
  | GROUP
  | BY
  | HAVING
  | ORDER
  | SOCKET
  | FILE
  | FIXEDWIDTH
  | VARSIZE
  | OFFSET
  | ADJUSTBY
  | SETVALUE
  | LINE
  | DELIMITED
  | EXTRACT
  | LIST
  | DISTINCT
  | CASE
  | WHEN
  | ELSE
  | THEN
  | END
  | FUNCTION
  | RETURNS
  | EXTERNAL
  | POSTGRES
  | RELATION
  | PIPE
  | ASC
  | DESC
  | SOURCE
  | ARGS
  | INSTANCE
  | TUPLE
  | ADAPTOR
  | BINDINGS
  | STREAM
  | EOSTMT
  | EOF
  | SUMAGG
  | COUNTAGG
  | AVGAGG
  | MAXAGG
  | MINAGG
  | INCLUDE
  | INTERVAL

open Parsing;;
let _ = parse_error;;
# 2 "src/parsers/Sqlparser.mly"
open Type
open Constants
;;

let bail ?(loc = symbol_start_pos ()) msg = 
   raise (Sql.SQLParseError(msg, loc))

let (table_defs:((string * Sql.table_t) list ref)) = Sql.global_table_defs

;;

let re_source_vars name vars =
   List.map (fun (_,v,t) -> ((Some(name)), v, t)) vars

;;
let mk_tbl table_def = 
   let (relname, relsch, reltype, relsource) = table_def in
   if List.mem_assoc relname !table_defs then
      bail ("Duplicate Definition of Relation '"^relname^"'")
   else
      let new_schema = re_source_vars relname relsch in
      let new_def = (relname, new_schema, reltype, relsource) in
         table_defs := (relname, new_def) :: !table_defs;
         new_def
;;
let get_schema table_name source_name = 
   if List.mem_assoc table_name !table_defs then
      let (_,sch,_,_) = List.assoc table_name !table_defs in
         List.map (fun (_,v,vt) -> (Some(source_name),v,vt)) sch
   else
      bail ("Reference to Undefined Table '"^table_name^"'")

let select_schema name q = 
   re_source_vars name (Sql.select_schema ~strict:false
                                          (List.map snd !table_defs) 
                                          q)

let natural_join lhs rhs = 
   let assoc_rhs = List.map (fun (tbl,v,t) -> (v,(tbl,v,t))) rhs in
   let var v = Sql.Var(v) in
   let (cond, sch)  = 
      List.fold_left (fun (cond, rhs) (lhs_tbl, lhs_v, lhs_type) ->
         if List.mem_assoc lhs_v rhs then
            (
               Sql.mk_and 
                  cond 
                  (Sql.Comparison(var(List.assoc lhs_v rhs), Eq, 
                                  var(lhs_tbl, lhs_v, lhs_type))),
               List.remove_assoc lhs_v rhs
            )
         else
            (cond, rhs)
      ) ((Sql.ConstB(true)), assoc_rhs) lhs
   in
      (cond, lhs @ (List.map snd sch))

let rec scan_for_existence (op_name:string) (q:Sql.select_t) (cmp_op:cmp_t) 
                           (expr:Sql.expr_t) =
   match q with
   | Sql.Union(s1, s2) -> 
      let rcr stmt = scan_for_existence op_name stmt cmp_op expr in
      Sql.Or(rcr s1, rcr s2)
   (* XXX: Verify that this is the right way to handle HAVING clauses *)
   | Sql.Select(targets, sources, cond, gb_vars, having, _) ->
      let (_,tgt) = match targets with [tgt] -> tgt | _ -> 
         bail ("Target of "^op_name^" clause should produce a single column")
      in 
      if Sql.is_agg_expr tgt
      then Sql.Comparison(expr, cmp_op, Sql.NestedQ(q))
      else Sql.Exists(Sql.Select(["unused", Sql.Const(CInt(1))], sources, 
            (Sql.And(cond, Sql.Comparison(expr, cmp_op, tgt))), 
             gb_vars, having, []))


let bind_select_vars q =
   Sql.bind_select_vars q (List.map snd !table_defs)

# 177 "src/parsers/Sqlparser.ml"
let yytransl_const = [|
  262 (* DATE *);
  263 (* CHAR *);
  264 (* VARCHAR *);
  265 (* TRUE *);
  266 (* FALSE *);
  267 (* EQ *);
  268 (* NE *);
  269 (* LT *);
  270 (* LE *);
  271 (* GT *);
  272 (* GE *);
  273 (* SUM *);
  274 (* MINUS *);
  275 (* PRODUCT *);
  276 (* DIVIDE *);
  277 (* AND *);
  278 (* OR *);
  279 (* NOT *);
  280 (* BETWEEN *);
  281 (* LIKE *);
  282 (* COMMA *);
  283 (* LPAREN *);
  284 (* RPAREN *);
  285 (* PERIOD *);
  286 (* AS *);
  287 (* JOIN *);
  288 (* INNER *);
  289 (* OUTER *);
  290 (* LEFT *);
  291 (* RIGHT *);
  292 (* ON *);
  293 (* NATURAL *);
  294 (* EXISTS *);
  295 (* IN *);
  296 (* SOME *);
  297 (* ALL *);
  298 (* UNION *);
  299 (* CREATE *);
  300 (* TABLE *);
  301 (* FROM *);
  302 (* USING *);
  303 (* SELECT *);
  304 (* WHERE *);
  305 (* GROUP *);
  306 (* BY *);
  307 (* HAVING *);
  308 (* ORDER *);
  309 (* SOCKET *);
  310 (* FILE *);
  311 (* FIXEDWIDTH *);
  312 (* VARSIZE *);
  313 (* OFFSET *);
  314 (* ADJUSTBY *);
  315 (* SETVALUE *);
  316 (* LINE *);
  317 (* DELIMITED *);
  318 (* EXTRACT *);
  319 (* LIST *);
  320 (* DISTINCT *);
  321 (* CASE *);
  322 (* WHEN *);
  323 (* ELSE *);
  324 (* THEN *);
  325 (* END *);
  326 (* FUNCTION *);
  327 (* RETURNS *);
  328 (* EXTERNAL *);
  329 (* POSTGRES *);
  330 (* RELATION *);
  331 (* PIPE *);
  332 (* ASC *);
  333 (* DESC *);
  334 (* SOURCE *);
  335 (* ARGS *);
  336 (* INSTANCE *);
  337 (* TUPLE *);
  338 (* ADAPTOR *);
  339 (* BINDINGS *);
  340 (* STREAM *);
  341 (* EOSTMT *);
    0 (* EOF *);
  342 (* SUMAGG *);
  343 (* COUNTAGG *);
  344 (* AVGAGG *);
  345 (* MAXAGG *);
  346 (* MINAGG *);
  347 (* INCLUDE *);
  348 (* INTERVAL *);
    0|]

let yytransl_block = [|
  257 (* TYPE *);
  258 (* ID *);
  259 (* STRING *);
  260 (* INT *);
  261 (* FLOAT *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\004\000\004\000\004\000\
\004\000\004\000\007\000\007\000\010\000\011\000\011\000\011\000\
\012\000\012\000\013\000\013\000\013\000\013\000\014\000\015\000\
\015\000\015\000\015\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\008\000\008\000\016\000\016\000\005\000\005\000\
\005\000\017\000\017\000\017\000\018\000\018\000\018\000\019\000\
\019\000\019\000\019\000\019\000\019\000\020\000\020\000\020\000\
\020\000\022\000\022\000\022\000\023\000\023\000\024\000\024\000\
\024\000\025\000\025\000\025\000\026\000\026\000\028\000\028\000\
\028\000\006\000\006\000\006\000\006\000\029\000\029\000\027\000\
\027\000\030\000\030\000\030\000\031\000\031\000\031\000\031\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\036\000\036\000\035\000\
\035\000\037\000\037\000\034\000\034\000\033\000\033\000\033\000\
\033\000\038\000\038\000\038\000\038\000\038\000\038\000\039\000\
\039\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
\021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
\021\000\021\000\040\000\040\000\040\000\032\000\032\000\032\000\
\032\000\032\000\032\000\000\000\000\000\000\000"

let yylen = "\002\000\
\001\000\002\000\003\000\003\000\001\000\002\000\001\000\001\000\
\001\000\001\000\010\000\001\000\002\000\002\000\002\000\002\000\
\003\000\005\000\003\000\004\000\001\000\001\000\002\000\003\000\
\004\000\003\000\001\000\001\000\004\000\004\000\001\000\001\000\
\001\000\001\000\002\000\004\000\001\000\001\000\006\000\008\000\
\001\000\001\000\003\000\001\000\001\000\003\000\001\000\001\000\
\002\000\003\000\004\000\005\000\001\000\005\000\003\000\004\000\
\001\000\003\000\001\000\001\000\002\000\000\000\002\000\000\000\
\001\000\002\000\000\000\001\000\001\000\003\000\003\000\000\000\
\001\000\003\000\003\000\007\000\001\000\000\000\001\000\001\000\
\003\000\003\000\001\000\000\000\001\000\001\000\001\000\001\000\
\003\000\001\000\001\000\003\000\001\000\003\000\003\000\003\000\
\002\000\003\000\004\000\004\000\004\000\004\000\004\000\003\000\
\004\000\006\000\006\000\005\000\001\000\002\000\000\000\003\000\
\005\000\003\000\005\000\003\000\001\000\001\000\001\000\000\000\
\002\000\001\000\001\000\001\000\001\000\001\000\001\000\003\000\
\003\000\001\000\003\000\003\000\002\000\001\000\001\000\004\000\
\003\000\004\000\005\000\006\000\007\000\005\000\006\000\006\000\
\006\000\001\000\003\000\001\000\000\000\001\000\001\000\001\000\
\004\000\003\000\006\000\002\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\156\000\001\000\000\000\007\000\000\000\009\000\157\000\
\109\000\000\000\152\000\150\000\151\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\090\000\077\000\000\000\037\000\000\000\038\000\
\000\000\079\000\000\000\006\000\000\000\002\000\000\000\000\000\
\000\000\000\000\097\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\085\000\087\000\086\000\088\000\000\000\075\000\000\000\
\000\000\000\000\000\000\000\000\000\000\003\000\004\000\000\000\
\104\000\000\000\000\000\092\000\095\000\000\000\094\000\000\000\
\089\000\098\000\000\000\000\000\134\000\135\000\000\000\000\000\
\000\000\000\000\000\000\000\000\130\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\105\000\
\153\000\000\000\000\000\133\000\000\000\000\000\000\000\000\000\
\000\000\122\000\123\000\124\000\125\000\126\000\127\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\099\000\000\000\000\000\121\000\101\000\
\100\000\102\000\103\000\000\000\000\000\000\000\000\000\043\000\
\046\000\053\000\000\000\000\000\057\000\000\000\061\000\065\000\
\000\000\000\000\116\000\000\000\129\000\000\000\000\000\000\000\
\000\000\137\000\000\000\000\000\000\000\000\000\000\000\131\000\
\132\000\000\000\000\000\108\000\000\000\000\000\000\000\000\000\
\000\000\034\000\028\000\033\000\000\000\000\000\000\000\000\000\
\000\000\049\000\000\000\000\000\000\000\000\000\000\000\000\000\
\073\000\000\000\000\000\106\000\136\000\138\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\107\000\
\081\000\082\000\155\000\000\000\000\000\000\000\000\000\000\000\
\050\000\000\000\058\000\053\000\000\000\000\000\000\000\068\000\
\000\000\076\000\000\000\000\000\000\000\142\000\000\000\000\000\
\000\000\000\000\115\000\000\000\000\000\000\000\036\000\000\000\
\027\000\000\000\000\000\040\000\051\000\000\000\000\000\056\000\
\071\000\000\000\000\000\143\000\000\000\000\000\140\000\144\000\
\145\000\113\000\029\000\030\000\000\000\000\000\000\000\000\000\
\052\000\000\000\000\000\141\000\147\000\000\000\011\000\000\000\
\000\000\000\000\000\000\000\000\026\000\024\000\070\000\013\000\
\025\000\016\000\014\000\015\000\022\000\000\000\023\000\000\000\
\000\000\019\000\000\000\000\000\020\000\000\000\000\000\018\000"

let yydgoto = "\004\000\
\010\000\011\000\098\000\012\000\013\000\014\000\015\000\158\000\
\199\000\031\001\036\001\051\001\047\001\037\001\004\001\041\000\
\076\000\077\000\165\000\166\000\099\000\167\000\118\000\170\000\
\242\000\009\001\150\000\211\000\043\000\151\000\070\000\035\000\
\107\000\083\000\147\000\145\000\100\000\140\000\101\000\248\000"

let yysindex = "\229\000\
\012\255\012\255\011\003\000\000\000\000\095\255\032\255\209\254\
\018\255\000\000\000\000\008\000\000\000\247\254\000\000\000\000\
\000\000\160\255\000\000\000\000\000\000\009\255\011\003\027\255\
\128\002\037\255\159\002\070\255\083\255\099\255\121\255\128\255\
\098\255\129\000\000\000\000\000\115\255\000\000\162\255\000\000\
\165\255\000\000\031\003\000\000\001\000\000\000\095\255\234\002\
\013\255\167\255\000\000\173\255\000\000\128\002\205\255\118\255\
\184\255\080\002\034\255\011\003\192\002\011\003\011\003\011\003\
\194\255\000\000\000\000\000\000\000\000\011\003\000\000\177\255\
\185\255\000\000\183\255\003\000\244\255\000\000\000\000\247\254\
\000\000\209\255\017\000\000\000\000\000\039\000\000\000\119\255\
\000\000\000\000\247\255\000\000\000\000\000\000\080\002\172\255\
\046\000\124\003\036\255\009\000\000\000\011\003\148\000\027\255\
\076\000\129\000\053\000\155\000\167\000\034\001\047\000\129\000\
\080\000\080\000\082\000\031\003\109\255\040\255\011\003\000\000\
\000\000\000\000\076\000\000\000\000\000\172\255\007\000\086\255\
\095\255\000\000\000\000\000\000\000\000\000\000\000\000\112\255\
\011\003\099\000\071\255\117\002\080\002\080\002\011\003\011\003\
\034\000\010\255\009\000\000\000\056\000\083\000\000\000\000\000\
\000\000\000\000\000\000\108\000\244\000\088\000\090\000\000\000\
\000\000\000\000\033\255\095\255\000\000\180\255\000\000\000\000\
\080\002\047\255\000\000\092\000\000\000\124\255\118\000\078\255\
\022\000\000\000\095\255\115\000\132\000\133\000\129\000\000\000\
\000\000\067\255\129\000\000\000\011\003\071\000\154\000\076\000\
\135\000\000\000\000\000\000\000\143\000\144\000\152\000\119\000\
\146\000\000\000\187\000\126\255\109\255\117\255\161\000\251\255\
\000\000\147\000\014\255\000\000\000\000\000\000\095\255\166\000\
\011\003\137\255\020\255\095\255\095\255\080\002\074\255\000\000\
\000\000\000\000\000\000\190\000\192\000\080\000\244\000\007\255\
\000\000\097\255\000\000\000\000\181\000\117\255\076\000\000\000\
\080\002\000\000\152\255\020\255\129\000\000\000\194\000\195\000\
\155\255\156\255\000\000\011\003\196\000\198\000\000\000\199\000\
\000\000\067\000\219\000\000\000\000\000\226\000\080\002\000\000\
\000\000\205\000\251\255\000\000\206\000\020\255\000\000\000\000\
\000\000\000\000\000\000\000\000\163\000\234\000\015\255\015\255\
\000\000\251\255\076\000\000\000\000\000\237\000\000\000\015\255\
\180\000\239\000\185\000\254\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\231\000\000\000\104\255\
\189\000\000\000\232\000\002\001\000\000\236\000\022\001\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\005\000\000\000\000\000\042\003\
\000\000\000\000\000\000\000\000\000\000\010\000\000\000\000\000\
\000\000\038\000\000\000\000\000\000\000\000\000\000\000\113\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\026\002\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\111\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\099\001\232\001\247\001\003\002\000\000\000\000\006\000\
\000\000\001\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\072\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\218\000\000\000\000\000\000\000\039\001\
\004\001\005\001\000\000\000\000\000\000\000\000\188\000\253\000\
\000\000\000\000\000\000\000\000\000\000\066\000\000\000\000\000\
\000\000\066\003\000\000\000\000\227\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\218\000\000\000\030\002\007\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\215\001\000\000\000\000\015\002\000\000\000\000\
\000\000\068\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\145\001\000\000\
\000\000\138\255\224\000\000\000\000\000\000\000\000\000\004\001\
\000\000\000\000\000\000\000\000\190\255\237\255\010\001\000\000\
\013\000\000\000\000\000\000\000\000\000\000\000\000\000\221\000\
\000\000\000\000\069\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\012\001\000\000\000\000\000\000\201\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\177\001\000\000\000\000\000\000\
\000\000\000\000\000\000\012\001\169\001\000\000\013\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\037\000\072\000\000\000\000\000\012\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\242\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\015\001\000\000\000\000"

let yygindex = "\000\000\
\000\000\029\000\019\000\000\000\000\000\250\255\000\000\144\255\
\069\001\000\000\000\000\248\000\000\000\161\255\000\000\000\000\
\000\000\189\001\061\255\000\000\164\255\106\001\000\000\000\000\
\000\000\033\001\142\255\000\000\000\000\125\001\000\000\057\255\
\000\000\205\001\073\001\179\001\105\001\000\000\000\000\136\255"

let yytablesize = 1187
let yytable = "\037\000\
\078\000\159\000\124\000\128\000\010\000\074\000\001\001\046\000\
\172\000\008\000\237\000\005\000\039\000\240\000\084\000\021\000\
\042\000\033\001\056\000\247\000\044\000\034\000\019\000\020\000\
\021\000\022\000\066\000\067\000\068\000\069\000\016\000\085\000\
\047\000\128\000\202\000\050\000\069\000\091\000\006\000\168\000\
\080\000\051\000\008\001\055\000\247\000\059\000\209\000\088\000\
\184\000\185\000\066\000\067\000\068\000\069\000\007\000\052\000\
\141\000\142\000\008\000\002\001\003\001\075\000\203\000\057\000\
\241\000\064\000\082\000\072\000\067\000\034\001\247\000\066\000\
\055\000\079\000\035\001\038\000\208\000\189\000\103\000\106\000\
\108\000\109\000\110\000\066\000\067\000\068\000\069\000\169\000\
\112\000\056\000\066\000\067\000\068\000\069\000\036\000\210\000\
\060\000\179\000\005\001\102\000\065\000\039\000\009\000\143\000\
\215\000\049\001\141\000\142\000\162\000\061\000\163\000\033\000\
\093\000\173\000\127\000\040\000\236\000\255\000\163\000\088\000\
\146\000\006\000\174\000\013\001\010\001\062\000\006\001\109\000\
\109\000\109\000\109\000\050\001\222\000\180\000\075\000\164\000\
\175\000\082\000\077\000\252\000\216\000\008\000\071\000\164\000\
\127\000\090\000\122\000\063\000\011\001\029\001\176\000\213\000\
\077\000\234\000\064\000\177\000\047\000\204\000\183\000\047\000\
\047\000\186\000\187\000\072\000\246\000\047\000\073\000\047\000\
\010\001\086\000\026\001\125\000\218\000\018\000\019\000\020\000\
\021\000\022\000\047\000\012\001\093\000\094\000\016\001\017\001\
\038\001\091\000\048\000\154\000\049\000\023\000\024\000\087\000\
\041\001\047\000\095\000\111\000\047\000\047\000\126\000\066\000\
\067\000\068\000\069\000\113\000\114\000\205\000\114\000\223\000\
\243\000\097\000\206\000\114\000\115\000\249\000\250\000\032\000\
\207\000\032\000\008\000\032\000\063\000\066\000\067\000\068\000\
\069\000\066\000\067\000\068\000\069\000\001\000\002\000\003\000\
\089\000\026\000\119\000\245\000\027\000\109\000\109\000\109\000\
\109\000\109\000\109\000\109\000\109\000\109\000\109\000\146\000\
\146\000\109\000\109\000\109\000\096\000\045\001\077\000\046\001\
\005\000\028\000\029\000\030\000\031\000\032\000\031\000\033\000\
\031\000\109\000\031\000\112\000\077\000\112\000\146\000\141\000\
\142\000\130\000\131\000\132\000\133\000\134\000\135\000\066\000\
\067\000\068\000\069\000\006\000\116\000\136\000\137\000\138\000\
\117\000\074\000\089\000\123\000\069\000\091\000\066\000\067\000\
\068\000\069\000\217\000\007\000\120\000\139\000\077\000\008\000\
\091\000\091\000\091\000\091\000\091\000\091\000\091\000\091\000\
\091\000\091\000\091\000\091\000\091\000\091\000\091\000\091\000\
\069\000\091\000\121\000\091\000\091\000\022\001\023\001\146\000\
\129\000\156\000\091\000\144\000\091\000\149\000\069\000\091\000\
\152\000\157\000\091\000\160\000\191\000\091\000\091\000\069\000\
\091\000\010\000\074\000\009\000\045\000\064\000\008\000\072\000\
\067\000\039\000\044\000\066\000\021\000\178\000\188\000\091\000\
\091\000\091\000\091\000\064\000\192\000\072\000\067\000\193\000\
\093\000\066\000\064\000\200\000\064\000\201\000\072\000\212\000\
\214\000\069\000\091\000\093\000\093\000\093\000\093\000\093\000\
\093\000\093\000\093\000\093\000\093\000\093\000\093\000\093\000\
\093\000\093\000\093\000\224\000\093\000\219\000\093\000\093\000\
\128\000\066\000\067\000\068\000\069\000\093\000\064\000\093\000\
\072\000\067\000\093\000\225\000\066\000\093\000\220\000\221\000\
\093\000\093\000\227\000\093\000\066\000\067\000\068\000\069\000\
\139\000\228\000\229\000\066\000\067\000\068\000\069\000\148\000\
\055\000\230\000\093\000\093\000\093\000\093\000\153\000\066\000\
\067\000\068\000\069\000\154\000\233\000\231\000\232\000\238\000\
\244\000\253\000\154\000\254\000\239\000\093\000\154\000\154\000\
\154\000\154\000\154\000\154\000\154\000\154\000\154\000\154\000\
\154\000\154\000\154\000\154\000\154\000\154\000\048\000\154\000\
\007\001\154\000\154\000\014\001\063\000\024\001\015\001\019\001\
\154\000\020\001\154\000\025\001\021\001\154\000\027\001\042\000\
\154\000\028\001\030\001\154\000\154\000\032\001\154\000\040\001\
\042\001\054\000\043\001\194\000\195\000\044\001\045\000\052\001\
\063\000\196\000\197\000\198\000\096\000\154\000\154\000\154\000\
\154\000\048\001\062\000\053\001\054\001\055\001\063\000\096\000\
\096\000\096\000\096\000\096\000\096\000\063\000\059\000\063\000\
\154\000\096\000\096\000\096\000\096\000\096\000\096\000\049\001\
\096\000\158\000\096\000\096\000\117\000\080\000\111\000\084\000\
\119\000\096\000\083\000\096\000\110\000\035\000\096\000\149\000\
\148\000\096\000\017\000\000\001\096\000\096\000\056\001\096\000\
\161\000\063\000\066\000\067\000\068\000\069\000\235\000\093\000\
\093\000\093\000\093\000\039\001\226\000\155\000\096\000\096\000\
\096\000\096\000\093\000\171\000\018\001\190\000\251\000\146\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\096\000\109\000\109\000\109\000\109\000\109\000\109\000\
\109\000\109\000\109\000\109\000\146\000\146\000\109\000\109\000\
\109\000\146\000\044\000\146\000\000\000\000\000\146\000\000\000\
\000\000\000\000\000\000\000\000\146\000\000\000\109\000\000\000\
\000\000\146\000\000\000\109\000\109\000\109\000\109\000\146\000\
\146\000\000\000\146\000\000\000\044\000\000\000\044\000\000\000\
\109\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\146\000\044\000\000\000\000\000\044\000\
\128\000\000\000\044\000\044\000\000\000\044\000\000\000\000\000\
\000\000\000\000\000\000\000\000\146\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\128\000\128\000\000\000\
\139\000\000\000\128\000\000\000\128\000\000\000\000\000\128\000\
\055\000\000\000\000\000\000\000\000\000\128\000\000\000\044\000\
\000\000\000\000\128\000\000\000\000\000\139\000\139\000\000\000\
\128\000\128\000\139\000\128\000\139\000\000\000\000\000\139\000\
\000\000\000\000\055\000\000\000\055\000\139\000\000\000\055\000\
\000\000\000\000\139\000\000\000\128\000\055\000\048\000\000\000\
\139\000\139\000\055\000\139\000\000\000\000\000\000\000\000\000\
\055\000\055\000\000\000\055\000\000\000\128\000\000\000\042\000\
\000\000\000\000\000\000\000\000\139\000\000\000\000\000\000\000\
\048\000\054\000\048\000\000\000\000\000\048\000\045\000\000\000\
\000\000\000\000\048\000\048\000\000\000\139\000\000\000\000\000\
\048\000\042\000\062\000\042\000\000\000\055\000\048\000\048\000\
\000\000\048\000\000\000\054\000\000\000\054\000\059\000\000\000\
\054\000\042\000\045\000\000\000\042\000\000\000\054\000\042\000\
\042\000\000\000\042\000\054\000\000\000\080\000\062\000\000\000\
\045\000\054\000\054\000\045\000\054\000\000\000\045\000\045\000\
\000\000\045\000\059\000\048\000\062\000\000\000\000\000\000\000\
\000\000\000\000\062\000\062\000\000\000\062\000\000\000\080\000\
\059\000\080\000\000\000\000\000\042\000\000\000\059\000\059\000\
\000\000\059\000\000\000\000\000\000\000\000\000\054\000\080\000\
\000\000\000\000\000\000\045\000\000\000\000\000\000\000\092\000\
\080\000\018\000\019\000\020\000\021\000\022\000\000\000\062\000\
\093\000\094\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\023\000\024\000\059\000\000\000\000\000\095\000\000\000\
\000\000\000\000\096\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\080\000\000\000\017\000\097\000\018\000\019\000\
\020\000\021\000\022\000\000\000\000\000\000\000\000\000\053\000\
\000\000\018\000\019\000\020\000\021\000\022\000\023\000\024\000\
\000\000\000\000\000\000\000\000\000\000\026\000\000\000\025\000\
\027\000\023\000\024\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\054\000\000\000\181\000\182\000\017\000\000\000\
\018\000\019\000\020\000\021\000\022\000\028\000\029\000\030\000\
\031\000\032\000\000\000\033\000\000\000\000\000\008\000\000\000\
\023\000\024\000\026\000\000\000\000\000\027\000\000\000\000\000\
\000\000\025\000\000\000\000\000\000\000\026\000\000\000\017\000\
\027\000\018\000\019\000\020\000\021\000\022\000\000\000\000\000\
\000\000\000\000\028\000\029\000\030\000\031\000\032\000\000\000\
\033\000\023\000\104\000\000\000\000\000\028\000\029\000\030\000\
\031\000\032\000\025\000\033\000\026\000\000\000\000\000\027\000\
\058\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\017\000\000\000\018\000\019\000\020\000\021\000\022\000\
\000\000\000\000\000\000\000\000\028\000\029\000\030\000\031\000\
\032\000\000\000\033\000\023\000\024\000\026\000\000\000\105\000\
\027\000\000\000\000\000\000\000\025\000\081\000\000\000\000\000\
\000\000\000\000\017\000\000\000\018\000\019\000\020\000\021\000\
\022\000\000\000\000\000\000\000\000\000\028\000\029\000\030\000\
\031\000\032\000\000\000\033\000\023\000\024\000\074\000\000\000\
\018\000\019\000\020\000\021\000\022\000\025\000\000\000\026\000\
\000\000\078\000\027\000\078\000\078\000\078\000\078\000\078\000\
\023\000\024\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\025\000\000\000\078\000\078\000\000\000\000\000\028\000\
\029\000\030\000\031\000\032\000\078\000\033\000\000\000\000\000\
\026\000\000\000\000\000\027\000\098\000\098\000\098\000\098\000\
\098\000\098\000\098\000\098\000\098\000\098\000\000\000\000\000\
\098\000\098\000\098\000\000\000\026\000\075\000\000\000\027\000\
\028\000\029\000\030\000\031\000\032\000\000\000\033\000\078\000\
\098\000\000\000\078\000\075\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\028\000\029\000\030\000\031\000\
\032\000\000\000\033\000\000\000\000\000\000\000\000\000\078\000\
\078\000\078\000\078\000\078\000\000\000\078\000\130\000\131\000\
\132\000\133\000\134\000\135\000\066\000\067\000\068\000\069\000\
\000\000\000\000\136\000\137\000\138\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\139\000"

let yycheck = "\006\000\
\000\000\114\000\095\000\096\000\000\000\000\000\000\001\000\000\
\123\000\000\000\206\000\000\001\000\000\000\001\002\001\000\000\
\064\001\003\001\025\000\219\000\003\001\003\000\003\001\004\001\
\005\001\006\001\017\001\018\001\019\001\020\001\002\000\019\001\
\042\001\126\000\002\001\027\001\000\000\000\000\027\001\000\001\
\047\000\023\000\238\000\025\000\244\000\027\000\000\001\054\000\
\141\000\142\000\017\001\018\001\019\001\020\001\043\001\029\001\
\021\001\022\001\047\001\053\001\054\001\043\000\030\001\027\001\
\051\001\000\000\048\000\000\000\000\000\055\001\014\001\000\000\
\054\000\045\000\060\001\044\001\169\000\068\001\060\000\061\000\
\062\000\063\000\064\000\017\001\018\001\019\001\020\001\048\001\
\070\000\096\000\017\001\018\001\019\001\020\001\000\001\049\001\
\027\001\027\001\002\001\066\001\003\001\070\001\091\001\068\001\
\027\001\002\001\021\001\022\001\000\001\027\001\002\001\092\001\
\000\000\028\001\096\000\084\001\000\001\230\000\002\001\126\000\
\102\000\027\001\129\000\244\000\239\000\027\001\030\001\017\001\
\018\001\019\001\020\001\028\001\066\001\063\001\116\000\027\001\
\025\001\119\000\028\001\066\001\063\001\047\001\028\001\027\001\
\126\000\028\001\028\001\027\001\241\000\014\001\039\001\028\001\
\042\001\028\001\027\001\137\000\042\001\164\000\140\000\042\001\
\042\001\143\000\144\000\002\001\028\001\042\001\002\001\042\001\
\027\001\003\001\007\001\000\001\179\000\002\001\003\001\004\001\
\005\001\006\001\042\001\028\001\009\001\010\001\028\001\028\001\
\024\001\002\001\027\001\000\000\029\001\018\001\019\001\019\001\
\032\001\042\001\023\001\002\001\042\001\042\001\027\001\017\001\
\018\001\019\001\020\001\027\001\067\001\026\001\069\001\189\000\
\215\000\038\001\031\001\027\001\030\001\220\000\221\000\026\001\
\037\001\028\001\047\001\030\001\000\000\017\001\018\001\019\001\
\020\001\017\001\018\001\019\001\020\001\001\000\002\000\003\000\
\028\001\062\001\026\001\217\000\065\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\000\000\000\001\028\001\002\001\
\000\001\086\001\087\001\088\001\089\001\090\001\026\001\092\001\
\028\001\039\001\030\001\067\001\042\001\069\001\252\000\021\001\
\022\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\027\001\026\001\023\001\024\001\025\001\
\045\001\028\001\028\001\045\001\000\001\000\001\017\001\018\001\
\019\001\020\001\021\001\043\001\028\001\039\001\042\001\047\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\028\001\028\001\028\001\030\001\031\001\003\001\004\001\000\000\
\027\001\027\001\037\001\067\001\039\001\002\001\042\001\042\001\
\028\001\002\001\045\001\002\001\029\001\048\001\049\001\051\001\
\051\001\085\001\085\001\091\001\085\001\028\001\085\001\028\001\
\028\001\085\001\000\000\028\001\085\001\003\001\069\001\066\001\
\067\001\068\001\069\001\042\001\026\001\042\001\042\001\004\001\
\000\001\042\001\049\001\028\001\051\001\028\001\051\001\028\001\
\003\001\085\001\085\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\069\001\028\001\027\001\030\001\031\001\
\000\000\017\001\018\001\019\001\020\001\037\001\085\001\039\001\
\085\001\085\001\042\001\002\001\085\001\045\001\027\001\027\001\
\048\001\049\001\028\001\051\001\017\001\018\001\019\001\020\001\
\000\000\027\001\027\001\017\001\018\001\019\001\020\001\028\001\
\000\000\026\001\066\001\067\001\068\001\069\001\028\001\017\001\
\018\001\019\001\020\001\000\001\002\001\071\001\045\001\031\001\
\027\001\004\001\028\001\004\001\050\001\085\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\000\000\028\001\
\036\001\030\001\031\001\026\001\000\001\003\001\028\001\028\001\
\037\001\028\001\039\001\002\001\030\001\042\001\026\001\000\000\
\045\001\028\001\072\001\048\001\049\001\004\001\051\001\003\001\
\061\001\000\000\004\001\000\001\001\001\061\001\000\000\059\001\
\028\001\006\001\007\001\008\001\000\001\066\001\067\001\068\001\
\069\001\027\001\000\000\028\001\003\001\026\001\042\001\011\001\
\012\001\013\001\014\001\015\001\016\001\049\001\000\000\051\001\
\085\001\021\001\022\001\023\001\024\001\025\001\026\001\002\001\
\028\001\000\000\030\001\031\001\028\001\000\000\069\001\028\001\
\028\001\037\001\028\001\039\001\069\001\028\001\042\001\028\001\
\028\001\045\001\028\001\231\000\048\001\049\001\055\001\051\001\
\116\000\085\001\017\001\018\001\019\001\020\001\205\000\017\001\
\018\001\019\001\020\001\027\001\192\000\028\001\066\001\067\001\
\068\001\069\001\028\001\119\000\252\000\147\000\222\000\000\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\085\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\000\001\028\001\255\255\255\255\031\001\255\255\
\255\255\255\255\255\255\255\255\037\001\255\255\039\001\255\255\
\255\255\042\001\255\255\017\001\018\001\019\001\020\001\048\001\
\049\001\255\255\051\001\255\255\026\001\255\255\028\001\255\255\
\030\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\068\001\042\001\255\255\255\255\045\001\
\000\001\255\255\048\001\049\001\255\255\051\001\255\255\255\255\
\255\255\255\255\255\255\255\255\085\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\021\001\022\001\255\255\
\000\001\255\255\026\001\255\255\028\001\255\255\255\255\031\001\
\000\001\255\255\255\255\255\255\255\255\037\001\255\255\085\001\
\255\255\255\255\042\001\255\255\255\255\021\001\022\001\255\255\
\048\001\049\001\026\001\051\001\028\001\255\255\255\255\031\001\
\255\255\255\255\026\001\255\255\028\001\037\001\255\255\031\001\
\255\255\255\255\042\001\255\255\068\001\037\001\000\001\255\255\
\048\001\049\001\042\001\051\001\255\255\255\255\255\255\255\255\
\048\001\049\001\255\255\051\001\255\255\085\001\255\255\000\001\
\255\255\255\255\255\255\255\255\068\001\255\255\255\255\255\255\
\026\001\000\001\028\001\255\255\255\255\031\001\000\001\255\255\
\255\255\255\255\036\001\037\001\255\255\085\001\255\255\255\255\
\042\001\026\001\000\001\028\001\255\255\085\001\048\001\049\001\
\255\255\051\001\255\255\026\001\255\255\028\001\000\001\255\255\
\031\001\042\001\028\001\255\255\045\001\255\255\037\001\048\001\
\049\001\255\255\051\001\042\001\255\255\000\001\028\001\255\255\
\042\001\048\001\049\001\045\001\051\001\255\255\048\001\049\001\
\255\255\051\001\028\001\085\001\042\001\255\255\255\255\255\255\
\255\255\255\255\048\001\049\001\255\255\051\001\255\255\026\001\
\042\001\028\001\255\255\255\255\085\001\255\255\048\001\049\001\
\255\255\051\001\255\255\255\255\255\255\255\255\085\001\042\001\
\255\255\255\255\255\255\085\001\255\255\255\255\255\255\000\001\
\051\001\002\001\003\001\004\001\005\001\006\001\255\255\085\001\
\009\001\010\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\018\001\019\001\085\001\255\255\255\255\023\001\255\255\
\255\255\255\255\027\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\085\001\255\255\000\001\038\001\002\001\003\001\
\004\001\005\001\006\001\255\255\255\255\255\255\255\255\000\001\
\255\255\002\001\003\001\004\001\005\001\006\001\018\001\019\001\
\255\255\255\255\255\255\255\255\255\255\062\001\255\255\027\001\
\065\001\018\001\019\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\027\001\255\255\040\001\041\001\000\001\255\255\
\002\001\003\001\004\001\005\001\006\001\086\001\087\001\088\001\
\089\001\090\001\255\255\092\001\255\255\255\255\047\001\255\255\
\018\001\019\001\062\001\255\255\255\255\065\001\255\255\255\255\
\255\255\027\001\255\255\255\255\255\255\062\001\255\255\000\001\
\065\001\002\001\003\001\004\001\005\001\006\001\255\255\255\255\
\255\255\255\255\086\001\087\001\088\001\089\001\090\001\255\255\
\092\001\018\001\019\001\255\255\255\255\086\001\087\001\088\001\
\089\001\090\001\027\001\092\001\062\001\255\255\255\255\065\001\
\066\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\000\001\255\255\002\001\003\001\004\001\005\001\006\001\
\255\255\255\255\255\255\255\255\086\001\087\001\088\001\089\001\
\090\001\255\255\092\001\018\001\019\001\062\001\255\255\064\001\
\065\001\255\255\255\255\255\255\027\001\028\001\255\255\255\255\
\255\255\255\255\000\001\255\255\002\001\003\001\004\001\005\001\
\006\001\255\255\255\255\255\255\255\255\086\001\087\001\088\001\
\089\001\090\001\255\255\092\001\018\001\019\001\000\001\255\255\
\002\001\003\001\004\001\005\001\006\001\027\001\255\255\062\001\
\255\255\000\001\065\001\002\001\003\001\004\001\005\001\006\001\
\018\001\019\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\027\001\255\255\018\001\019\001\255\255\255\255\086\001\
\087\001\088\001\089\001\090\001\027\001\092\001\255\255\255\255\
\062\001\255\255\255\255\065\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\255\255\255\255\
\023\001\024\001\025\001\255\255\062\001\028\001\255\255\065\001\
\086\001\087\001\088\001\089\001\090\001\255\255\092\001\062\001\
\039\001\255\255\065\001\042\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\086\001\087\001\088\001\089\001\
\090\001\255\255\092\001\255\255\255\255\255\255\255\255\086\001\
\087\001\088\001\089\001\090\001\255\255\092\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\020\001\
\255\255\255\255\023\001\024\001\025\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\039\001"

let yynames_const = "\
  DATE\000\
  CHAR\000\
  VARCHAR\000\
  TRUE\000\
  FALSE\000\
  EQ\000\
  NE\000\
  LT\000\
  LE\000\
  GT\000\
  GE\000\
  SUM\000\
  MINUS\000\
  PRODUCT\000\
  DIVIDE\000\
  AND\000\
  OR\000\
  NOT\000\
  BETWEEN\000\
  LIKE\000\
  COMMA\000\
  LPAREN\000\
  RPAREN\000\
  PERIOD\000\
  AS\000\
  JOIN\000\
  INNER\000\
  OUTER\000\
  LEFT\000\
  RIGHT\000\
  ON\000\
  NATURAL\000\
  EXISTS\000\
  IN\000\
  SOME\000\
  ALL\000\
  UNION\000\
  CREATE\000\
  TABLE\000\
  FROM\000\
  USING\000\
  SELECT\000\
  WHERE\000\
  GROUP\000\
  BY\000\
  HAVING\000\
  ORDER\000\
  SOCKET\000\
  FILE\000\
  FIXEDWIDTH\000\
  VARSIZE\000\
  OFFSET\000\
  ADJUSTBY\000\
  SETVALUE\000\
  LINE\000\
  DELIMITED\000\
  EXTRACT\000\
  LIST\000\
  DISTINCT\000\
  CASE\000\
  WHEN\000\
  ELSE\000\
  THEN\000\
  END\000\
  FUNCTION\000\
  RETURNS\000\
  EXTERNAL\000\
  POSTGRES\000\
  RELATION\000\
  PIPE\000\
  ASC\000\
  DESC\000\
  SOURCE\000\
  ARGS\000\
  INSTANCE\000\
  TUPLE\000\
  ADAPTOR\000\
  BINDINGS\000\
  STREAM\000\
  EOSTMT\000\
  EOF\000\
  SUMAGG\000\
  COUNTAGG\000\
  AVGAGG\000\
  MAXAGG\000\
  MINAGG\000\
  INCLUDE\000\
  INTERVAL\000\
  "

let yynames_block = "\
  TYPE\000\
  ID\000\
  STRING\000\
  INT\000\
  FLOAT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 :  Sql.t list ) in
    Obj.repr(
# 125 "src/parsers/Sqlparser.mly"
                       ( 
   List.fold_right Sql.add_to_file_first _1 Sql.empty_file 
)
# 869 "src/parsers/Sqlparser.ml"
               :  Sql.file_t ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'dbtoasterSqlStmt) in
    Obj.repr(
# 130 "src/parsers/Sqlparser.mly"
                                 ( _1 )
# 876 "src/parsers/Sqlparser.ml"
               :  Sql.t list ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'dbtoasterSqlStmt) in
    Obj.repr(
# 131 "src/parsers/Sqlparser.mly"
                                 ( _1 )
# 883 "src/parsers/Sqlparser.ml"
               :  Sql.t list ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'dbtoasterSqlStmt) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 :  Sql.t list ) in
    Obj.repr(
# 133 "src/parsers/Sqlparser.mly"
                                 ( _1 @ _3 )
# 891 "src/parsers/Sqlparser.ml"
               :  Sql.t list ))
; (fun __caml_parser_env ->
    Obj.repr(
# 134 "src/parsers/Sqlparser.mly"
        (
      bail "Expected ';'"
   )
# 899 "src/parsers/Sqlparser.ml"
               :  Sql.t list ))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 139 "src/parsers/Sqlparser.mly"
                           ( (!Sql.parse_file) _2 )
# 906 "src/parsers/Sqlparser.ml"
               : 'dbtoasterSqlStmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'createTableStmt) in
    Obj.repr(
# 140 "src/parsers/Sqlparser.mly"
                           ( [Sql.Create_Table(_1)] )
# 913 "src/parsers/Sqlparser.ml"
               : 'dbtoasterSqlStmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'selectStmt) in
    Obj.repr(
# 141 "src/parsers/Sqlparser.mly"
                           ( [Sql.SelectStmt(bind_select_vars _1)] )
# 920 "src/parsers/Sqlparser.ml"
               : 'dbtoasterSqlStmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'functionDeclarationStmt) in
    Obj.repr(
# 142 "src/parsers/Sqlparser.mly"
                           ( [] )
# 927 "src/parsers/Sqlparser.ml"
               : 'dbtoasterSqlStmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 143 "src/parsers/Sqlparser.mly"
         ( 
      bail "Invalid DBT-SQL statement";
   )
# 935 "src/parsers/Sqlparser.ml"
               : 'dbtoasterSqlStmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 5 : 'fieldList) in
    let _8 = (Parsing.peek_val __caml_parser_env 2 : 'typeDefn) in
    let _10 = (Parsing.peek_val __caml_parser_env 0 : 'functionDefinition) in
    Obj.repr(
# 149 "src/parsers/Sqlparser.mly"
                        (
    Functions.declare_usr_function _3 (List.map (fun (_,_,x)->x) _5) _8 _10 
  )
# 947 "src/parsers/Sqlparser.ml"
               : 'functionDeclarationStmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 152 "src/parsers/Sqlparser.mly"
        (
      bail "Invalid CREATE FUNCTION declaration"
   )
# 955 "src/parsers/Sqlparser.ml"
               : 'functionDeclarationStmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 157 "src/parsers/Sqlparser.mly"
                  ( _2 )
# 962 "src/parsers/Sqlparser.ml"
               : 'functionDefinition))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 163 "src/parsers/Sqlparser.mly"
                                    ( Schema.FixedSize(_2) )
# 969 "src/parsers/Sqlparser.ml"
               : 'framingStmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 164 "src/parsers/Sqlparser.mly"
                                    ( Schema.Delimited("\n") )
# 975 "src/parsers/Sqlparser.ml"
               : 'framingStmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 165 "src/parsers/Sqlparser.mly"
                                    ( Schema.Delimited(_1) )
# 982 "src/parsers/Sqlparser.ml"
               : 'framingStmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 169 "src/parsers/Sqlparser.mly"
                                           ( [(String.lowercase _1,_3)] )
# 990 "src/parsers/Sqlparser.ml"
               : 'adaptorParams))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'adaptorParams) in
    Obj.repr(
# 170 "src/parsers/Sqlparser.mly"
                                           ( (String.lowercase _1,_3)::_5 )
# 999 "src/parsers/Sqlparser.ml"
               : 'adaptorParams))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 173 "src/parsers/Sqlparser.mly"
                                   ( (String.lowercase _1, []) )
# 1006 "src/parsers/Sqlparser.ml"
               : 'adaptorStmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'adaptorParams) in
    Obj.repr(
# 174 "src/parsers/Sqlparser.mly"
                                   ( (String.lowercase _1, _3) )
# 1014 "src/parsers/Sqlparser.ml"
               : 'adaptorStmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 175 "src/parsers/Sqlparser.mly"
                                   ( (String.lowercase _1, []) )
# 1021 "src/parsers/Sqlparser.ml"
               : 'adaptorStmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 176 "src/parsers/Sqlparser.mly"
        (
      bail "Not a valid adaptor declaration"
   )
# 1029 "src/parsers/Sqlparser.ml"
               : 'adaptorStmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'framingStmt) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'adaptorStmt) in
    Obj.repr(
# 181 "src/parsers/Sqlparser.mly"
                            ( (_1, _2) )
# 1037 "src/parsers/Sqlparser.ml"
               : 'bytestreamParams))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'bytestreamParams) in
    Obj.repr(
# 185 "src/parsers/Sqlparser.mly"
  ( (Schema.FileSource(_2, fst _3), snd _3) )
# 1045 "src/parsers/Sqlparser.ml"
               : 'sourceStmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : int) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'bytestreamParams) in
    Obj.repr(
# 187 "src/parsers/Sqlparser.mly"
  ( (Schema.SocketSource(Unix.inet_addr_of_string _2, _3, fst _4), snd _4) )
# 1054 "src/parsers/Sqlparser.ml"
               : 'sourceStmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'bytestreamParams) in
    Obj.repr(
# 189 "src/parsers/Sqlparser.mly"
  ( (Schema.SocketSource(Unix.inet_addr_any, _2, fst _3), snd _3) )
# 1062 "src/parsers/Sqlparser.ml"
               : 'sourceStmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 190 "src/parsers/Sqlparser.mly"
        (
      bail "Invalid source statement"
   )
# 1070 "src/parsers/Sqlparser.ml"
               : 'sourceStmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Type.type_t) in
    Obj.repr(
# 195 "src/parsers/Sqlparser.mly"
                            ( _1 )
# 1077 "src/parsers/Sqlparser.ml"
               : 'typeDefn))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 196 "src/parsers/Sqlparser.mly"
                            ( TString )
# 1084 "src/parsers/Sqlparser.ml"
               : 'typeDefn))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 197 "src/parsers/Sqlparser.mly"
                            ( TString )
# 1091 "src/parsers/Sqlparser.ml"
               : 'typeDefn))
; (fun __caml_parser_env ->
    Obj.repr(
# 198 "src/parsers/Sqlparser.mly"
                            ( TString )
# 1097 "src/parsers/Sqlparser.ml"
               : 'typeDefn))
; (fun __caml_parser_env ->
    Obj.repr(
# 199 "src/parsers/Sqlparser.mly"
                            ( TString )
# 1103 "src/parsers/Sqlparser.ml"
               : 'typeDefn))
; (fun __caml_parser_env ->
    Obj.repr(
# 200 "src/parsers/Sqlparser.mly"
                            ( TDate    )
# 1109 "src/parsers/Sqlparser.ml"
               : 'typeDefn))
; (fun __caml_parser_env ->
    Obj.repr(
# 201 "src/parsers/Sqlparser.mly"
        (
      bail "Invalid type declaration"
   )
# 1117 "src/parsers/Sqlparser.ml"
               : 'typeDefn))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'typeDefn) in
    Obj.repr(
# 206 "src/parsers/Sqlparser.mly"
                                 ( [None, String.uppercase _1, _2] )
# 1125 "src/parsers/Sqlparser.ml"
               : 'fieldList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'typeDefn) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'fieldList) in
    Obj.repr(
# 207 "src/parsers/Sqlparser.mly"
                                 ( (None, String.uppercase _1, _2)::_4 )
# 1134 "src/parsers/Sqlparser.ml"
               : 'fieldList))
; (fun __caml_parser_env ->
    Obj.repr(
# 210 "src/parsers/Sqlparser.mly"
                      ( Schema.TableRel )
# 1140 "src/parsers/Sqlparser.ml"
               : 'tableOrStream))
; (fun __caml_parser_env ->
    Obj.repr(
# 211 "src/parsers/Sqlparser.mly"
                      ( Schema.StreamRel )
# 1146 "src/parsers/Sqlparser.ml"
               : 'tableOrStream))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'tableOrStream) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'fieldList) in
    Obj.repr(
# 214 "src/parsers/Sqlparser.mly"
                                                    ( 
      mk_tbl (String.uppercase _3, _5, _2, (Schema.NoSource, ("",[])))
    )
# 1157 "src/parsers/Sqlparser.ml"
               : 'createTableStmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'tableOrStream) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'fieldList) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'sourceStmt) in
    Obj.repr(
# 217 "src/parsers/Sqlparser.mly"
                                                                    ( 
      mk_tbl (String.uppercase _3, _5, _2, _8)
    )
# 1169 "src/parsers/Sqlparser.ml"
               : 'createTableStmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 220 "src/parsers/Sqlparser.mly"
        (
      bail "Invalid CREATE TABLE statement"
   )
# 1177 "src/parsers/Sqlparser.ml"
               : 'createTableStmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 :  Sql.expr_t ) in
    Obj.repr(
# 229 "src/parsers/Sqlparser.mly"
                   ( (String.uppercase (Sql.name_of_expr _1), _1) )
# 1184 "src/parsers/Sqlparser.ml"
               : 'targetItem))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 :  Sql.expr_t ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 230 "src/parsers/Sqlparser.mly"
                   ( (String.uppercase _3, _1) )
# 1192 "src/parsers/Sqlparser.ml"
               : 'targetItem))
; (fun __caml_parser_env ->
    Obj.repr(
# 231 "src/parsers/Sqlparser.mly"
        (
      bail "Invalid output column declaration"
   )
# 1200 "src/parsers/Sqlparser.ml"
               : 'targetItem))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'targetItem) in
    Obj.repr(
# 236 "src/parsers/Sqlparser.mly"
                              ( [_1] )
# 1207 "src/parsers/Sqlparser.ml"
               : 'targetList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'targetItem) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'targetList) in
    Obj.repr(
# 237 "src/parsers/Sqlparser.mly"
                              ( _1 :: _3 )
# 1215 "src/parsers/Sqlparser.ml"
               : 'targetList))
; (fun __caml_parser_env ->
    Obj.repr(
# 238 "src/parsers/Sqlparser.mly"
        (
      bail "Expected ','"
   )
# 1223 "src/parsers/Sqlparser.ml"
               : 'targetList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 243 "src/parsers/Sqlparser.mly"
            ( ((String.uppercase _1, (Sql.Table(String.uppercase _1))), 
               get_schema (String.uppercase _1) (String.uppercase _1)) )
# 1231 "src/parsers/Sqlparser.ml"
               : 'fromItem))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 245 "src/parsers/Sqlparser.mly"
            ( ((String.uppercase _2, (Sql.Table(String.uppercase _1))), 
               get_schema (String.uppercase _1) (String.uppercase _2)) )
# 1240 "src/parsers/Sqlparser.ml"
               : 'fromItem))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 247 "src/parsers/Sqlparser.mly"
            ( ((String.uppercase _3, (Sql.Table(String.uppercase _1))), 
               get_schema (String.uppercase _1) (String.uppercase _3)) )
# 1249 "src/parsers/Sqlparser.ml"
               : 'fromItem))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'selectStmt) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 250 "src/parsers/Sqlparser.mly"
            ( ((String.uppercase _4, (Sql.SubQ(_2))), 
               select_schema (String.uppercase _4) _2) )
# 1258 "src/parsers/Sqlparser.ml"
               : 'fromItem))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'selectStmt) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 253 "src/parsers/Sqlparser.mly"
            ( ((String.uppercase _5, (Sql.SubQ(_2))), 
               select_schema (String.uppercase _5) _2) )
# 1267 "src/parsers/Sqlparser.ml"
               : 'fromItem))
; (fun __caml_parser_env ->
    Obj.repr(
# 255 "src/parsers/Sqlparser.mly"
        (
      bail "Invalid source declaration in a FROM clause"
   )
# 1275 "src/parsers/Sqlparser.ml"
               : 'fromItem))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'fromJoin) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'fromItem) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'condition) in
    Obj.repr(
# 261 "src/parsers/Sqlparser.mly"
    ( let (lhs_tbl, lhs_cond, lhs_sch) = _1 in
      let (rhs_tbl,           rhs_sch) = _3 in
          (  lhs_tbl @ [rhs_tbl], 
             Sql.mk_and lhs_cond _5,
             lhs_sch @ rhs_sch
          )
    )
# 1290 "src/parsers/Sqlparser.ml"
               : 'fromJoin))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'fromJoin) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'fromItem) in
    Obj.repr(
# 269 "src/parsers/Sqlparser.mly"
    ( let (lhs_tbl, lhs_cond, lhs_sch) = _1 in
      let (rhs_tbl,           rhs_sch) = _3 in
          (  lhs_tbl @ [rhs_tbl], 
             lhs_cond,
             lhs_sch @ rhs_sch
          )
    )
# 1304 "src/parsers/Sqlparser.ml"
               : 'fromJoin))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'fromJoin) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'fromItem) in
    Obj.repr(
# 277 "src/parsers/Sqlparser.mly"
    ( let (lhs_tbl, lhs_cond, lhs_sch) = _1 in
      let (rhs_tbl,           rhs_sch) = _4 in
      let (join_cond, joined_sch) = natural_join lhs_sch rhs_sch in
          (  lhs_tbl @ [rhs_tbl], 
             Sql.mk_and lhs_cond join_cond,
             joined_sch
          )
    )
# 1319 "src/parsers/Sqlparser.ml"
               : 'fromJoin))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fromItem) in
    Obj.repr(
# 286 "src/parsers/Sqlparser.mly"
    ( let (tbl,sch) = _1 in ([tbl], (Sql.ConstB(true)), sch) )
# 1326 "src/parsers/Sqlparser.ml"
               : 'fromJoin))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'fromJoin) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'fromList) in
    Obj.repr(
# 290 "src/parsers/Sqlparser.mly"
            ( let (lhs_tbls, lhs_cond, _) = _1 in
              let (rhs_tbls, rhs_cond) = _3 in
                  (lhs_tbls @ rhs_tbls, Sql.mk_and lhs_cond rhs_cond) )
# 1336 "src/parsers/Sqlparser.ml"
               : 'fromList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fromJoin) in
    Obj.repr(
# 293 "src/parsers/Sqlparser.mly"
            ( let (tbl, join_cond, _) = _1 in (tbl, join_cond) )
# 1343 "src/parsers/Sqlparser.ml"
               : 'fromList))
; (fun __caml_parser_env ->
    Obj.repr(
# 294 "src/parsers/Sqlparser.mly"
        (
      bail "Expected ','"
   )
# 1351 "src/parsers/Sqlparser.ml"
               : 'fromList))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fromList) in
    Obj.repr(
# 299 "src/parsers/Sqlparser.mly"
                ( _2 )
# 1358 "src/parsers/Sqlparser.ml"
               : 'fromClause))
; (fun __caml_parser_env ->
    Obj.repr(
# 300 "src/parsers/Sqlparser.mly"
                ( ([], Sql.ConstB(true)) )
# 1364 "src/parsers/Sqlparser.ml"
               : 'fromClause))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'condition) in
    Obj.repr(
# 303 "src/parsers/Sqlparser.mly"
                  ( _2 )
# 1371 "src/parsers/Sqlparser.ml"
               : 'whereClause))
; (fun __caml_parser_env ->
    Obj.repr(
# 304 "src/parsers/Sqlparser.mly"
                  ( Sql.ConstB(true) )
# 1377 "src/parsers/Sqlparser.ml"
               : 'whereClause))
; (fun __caml_parser_env ->
    Obj.repr(
# 305 "src/parsers/Sqlparser.mly"
        (
      bail "Invalid WHERE clause"
   )
# 1385 "src/parsers/Sqlparser.ml"
               : 'whereClause))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'condition) in
    Obj.repr(
# 310 "src/parsers/Sqlparser.mly"
                   ( _2 )
# 1392 "src/parsers/Sqlparser.ml"
               : 'havingClause))
; (fun __caml_parser_env ->
    Obj.repr(
# 311 "src/parsers/Sqlparser.mly"
                   ( Sql.ConstB(true) )
# 1398 "src/parsers/Sqlparser.ml"
               : 'havingClause))
; (fun __caml_parser_env ->
    Obj.repr(
# 312 "src/parsers/Sqlparser.mly"
        (
      bail "Invalid HAVING clause"
   )
# 1406 "src/parsers/Sqlparser.ml"
               : 'havingClause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'variable) in
    Obj.repr(
# 317 "src/parsers/Sqlparser.mly"
                             ( [_1] )
# 1413 "src/parsers/Sqlparser.ml"
               : 'groupByList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'variable) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'groupByList) in
    Obj.repr(
# 318 "src/parsers/Sqlparser.mly"
                             ( _1 :: _3 )
# 1421 "src/parsers/Sqlparser.ml"
               : 'groupByList))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'groupByList) in
    Obj.repr(
# 321 "src/parsers/Sqlparser.mly"
                       ( _3 )
# 1428 "src/parsers/Sqlparser.ml"
               : 'groupByClause))
; (fun __caml_parser_env ->
    Obj.repr(
# 322 "src/parsers/Sqlparser.mly"
                       ( [] )
# 1434 "src/parsers/Sqlparser.ml"
               : 'groupByClause))
; (fun __caml_parser_env ->
    Obj.repr(
# 323 "src/parsers/Sqlparser.mly"
        (
      bail "Invalid GROUP BY clause"
   )
# 1442 "src/parsers/Sqlparser.ml"
               : 'groupByClause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'selectStmt) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'selectStmt) in
    Obj.repr(
# 328 "src/parsers/Sqlparser.mly"
                              ( Sql.Union(_1, _3) )
# 1450 "src/parsers/Sqlparser.ml"
               : 'selectStmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'selectStmt) in
    Obj.repr(
# 329 "src/parsers/Sqlparser.mly"
                           ( _2 )
# 1457 "src/parsers/Sqlparser.ml"
               : 'selectStmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'optionalDistinct) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'targetList) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'fromClause) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'whereClause) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'groupByClause) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'havingClause) in
    Obj.repr(
# 336 "src/parsers/Sqlparser.mly"
    (
      let (from, join_conds) = _4 in
      Sql.expand_wildcard_targets (List.map snd !table_defs)
         (Sql.Select(_3, from, Sql.mk_and join_conds _5, _6, _7, _2))
    )
# 1473 "src/parsers/Sqlparser.ml"
               : 'selectStmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 341 "src/parsers/Sqlparser.mly"
        (
      bail "Invalid SELECT statement"
   )
# 1481 "src/parsers/Sqlparser.ml"
               : 'selectStmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 346 "src/parsers/Sqlparser.mly"
            ( [] )
# 1487 "src/parsers/Sqlparser.ml"
               : 'optionalDistinct))
; (fun __caml_parser_env ->
    Obj.repr(
# 347 "src/parsers/Sqlparser.mly"
            ( [Sql.Select_Distinct] )
# 1493 "src/parsers/Sqlparser.ml"
               : 'optionalDistinct))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 353 "src/parsers/Sqlparser.mly"
                  ( (None, String.uppercase _1, TAny) )
# 1500 "src/parsers/Sqlparser.ml"
               : 'variable))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 354 "src/parsers/Sqlparser.mly"
                  ( ((Some(String.uppercase _1)),String.uppercase _3, TAny) )
# 1508 "src/parsers/Sqlparser.ml"
               : 'variable))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'variable) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'variableList) in
    Obj.repr(
# 357 "src/parsers/Sqlparser.mly"
                               ( _1 :: _3 )
# 1516 "src/parsers/Sqlparser.ml"
               : 'variableList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'variable) in
    Obj.repr(
# 358 "src/parsers/Sqlparser.mly"
                               ( [_1] )
# 1523 "src/parsers/Sqlparser.ml"
               : 'variableList))
; (fun __caml_parser_env ->
    Obj.repr(
# 359 "src/parsers/Sqlparser.mly"
                               ( [] )
# 1529 "src/parsers/Sqlparser.ml"
               : 'variableList))
; (fun __caml_parser_env ->
    Obj.repr(
# 362 "src/parsers/Sqlparser.mly"
          ( Sql.Sum )
# 1535 "src/parsers/Sqlparser.ml"
               : 'op))
; (fun __caml_parser_env ->
    Obj.repr(
# 363 "src/parsers/Sqlparser.mly"
          ( Sql.Prod )
# 1541 "src/parsers/Sqlparser.ml"
               : 'op))
; (fun __caml_parser_env ->
    Obj.repr(
# 364 "src/parsers/Sqlparser.mly"
          ( Sql.Sub)
# 1547 "src/parsers/Sqlparser.ml"
               : 'op))
; (fun __caml_parser_env ->
    Obj.repr(
# 365 "src/parsers/Sqlparser.mly"
          ( Sql.Div )
# 1553 "src/parsers/Sqlparser.ml"
               : 'op))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 :  Sql.expr_t ) in
    Obj.repr(
# 368 "src/parsers/Sqlparser.mly"
                           ( _2 )
# 1560 "src/parsers/Sqlparser.ml"
               :  Sql.expr_t ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'constant) in
    Obj.repr(
# 369 "src/parsers/Sqlparser.mly"
                           ( Sql.Const(_1) )
# 1567 "src/parsers/Sqlparser.ml"
               :  Sql.expr_t ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 370 "src/parsers/Sqlparser.mly"
               ( Sql.Var(None, String.uppercase _1, TAny) )
# 1574 "src/parsers/Sqlparser.ml"
               :  Sql.expr_t ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 371 "src/parsers/Sqlparser.mly"
               ( Sql.Var(Some(String.uppercase _1), String.uppercase _3, TAny) )
# 1582 "src/parsers/Sqlparser.ml"
               :  Sql.expr_t ))
; (fun __caml_parser_env ->
    Obj.repr(
# 372 "src/parsers/Sqlparser.mly"
               ( Sql.Var(None, "*", TAny) )
# 1588 "src/parsers/Sqlparser.ml"
               :  Sql.expr_t ))
; (fun __caml_parser_env ->
    Obj.repr(
# 373 "src/parsers/Sqlparser.mly"
                         ( Sql.Var(None, "*", TAny) )
# 1594 "src/parsers/Sqlparser.ml"
               :  Sql.expr_t ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 374 "src/parsers/Sqlparser.mly"
                         ( Sql.Var(Some(String.uppercase _1), "*", TAny) )
# 1601 "src/parsers/Sqlparser.ml"
               :  Sql.expr_t ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 :  Sql.expr_t ) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'op) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 :  Sql.expr_t ) in
    Obj.repr(
# 375 "src/parsers/Sqlparser.mly"
                                ( Sql.SQLArith(_1, _2, _3) )
# 1610 "src/parsers/Sqlparser.ml"
               :  Sql.expr_t ))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 :  Sql.expr_t ) in
    Obj.repr(
# 376 "src/parsers/Sqlparser.mly"
                                ( Sql.Negation(_2) )
# 1617 "src/parsers/Sqlparser.ml"
               :  Sql.expr_t ))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'selectStmt) in
    Obj.repr(
# 377 "src/parsers/Sqlparser.mly"
                                ( Sql.NestedQ(_2) )
# 1624 "src/parsers/Sqlparser.ml"
               :  Sql.expr_t ))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 :  Sql.expr_t ) in
    Obj.repr(
# 378 "src/parsers/Sqlparser.mly"
                                  ( Sql.Aggregate(Sql.SumAgg, _3) )
# 1631 "src/parsers/Sqlparser.ml"
               :  Sql.expr_t ))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 :  Sql.expr_t ) in
    Obj.repr(
# 379 "src/parsers/Sqlparser.mly"
                                  ( Sql.Aggregate(Sql.AvgAgg, _3) )
# 1638 "src/parsers/Sqlparser.ml"
               :  Sql.expr_t ))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'countAggParam) in
    Obj.repr(
# 380 "src/parsers/Sqlparser.mly"
                                       ( Sql.Aggregate(Sql.CountAgg(_3), 
                                                     Sql.Const(CInt(1))) )
# 1646 "src/parsers/Sqlparser.ml"
               :  Sql.expr_t ))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 :  Sql.expr_t ) in
    Obj.repr(
# 382 "src/parsers/Sqlparser.mly"
                                  ( bail "MAX is not (yet) supported" )
# 1653 "src/parsers/Sqlparser.ml"
               :  Sql.expr_t ))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 :  Sql.expr_t ) in
    Obj.repr(
# 383 "src/parsers/Sqlparser.mly"
                                  ( bail "MIN is not (yet) supported" )
# 1660 "src/parsers/Sqlparser.ml"
               :  Sql.expr_t ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 384 "src/parsers/Sqlparser.mly"
                                      ( Sql.ExternalFn(_1,[]) )
# 1667 "src/parsers/Sqlparser.ml"
               :  Sql.expr_t ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'functionParameters) in
    Obj.repr(
# 385 "src/parsers/Sqlparser.mly"
                                      ( Sql.ExternalFn(_1,_3) )
# 1675 "src/parsers/Sqlparser.ml"
               :  Sql.expr_t ))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'variable) in
    Obj.repr(
# 386 "src/parsers/Sqlparser.mly"
                                         (
      let field = String.uppercase _3 in
      match field with
         | "YEAR" | "MONTH" | "DAY" -> 
            Sql.ExternalFn("date_part", [Sql.Const(CString(field)); 
                                         Sql.Var(_5)])
         | _ -> bail ("Invalid field '"^field^"' referenced in EXTRACT")
   )
# 1690 "src/parsers/Sqlparser.ml"
               :  Sql.expr_t ))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 :  Sql.expr_t ) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'caseSimpleWhenClauseList) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'caseElseClause) in
    Obj.repr(
# 394 "src/parsers/Sqlparser.mly"
                                                                   (
      Sql.Case(List.map (fun (cmp,ret) -> 
         (Sql.Comparison(_2,Type.Eq,cmp), ret)) _4, _5)
   )
# 1702 "src/parsers/Sqlparser.ml"
               :  Sql.expr_t ))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'caseSearchWhenClauseList) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'caseElseClause) in
    Obj.repr(
# 398 "src/parsers/Sqlparser.mly"
                                                        ( Sql.Case(_3, _4) )
# 1710 "src/parsers/Sqlparser.ml"
               :  Sql.expr_t ))
; (fun __caml_parser_env ->
    Obj.repr(
# 399 "src/parsers/Sqlparser.mly"
        (
      bail "Invalid SQL expression"
   )
# 1718 "src/parsers/Sqlparser.ml"
               :  Sql.expr_t ))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 :  Sql.expr_t ) in
    Obj.repr(
# 404 "src/parsers/Sqlparser.mly"
                   ( _2 )
# 1725 "src/parsers/Sqlparser.ml"
               : 'caseElseClause))
; (fun __caml_parser_env ->
    Obj.repr(
# 405 "src/parsers/Sqlparser.mly"
                   ( Sql.Const(CInt(0)) )
# 1731 "src/parsers/Sqlparser.ml"
               : 'caseElseClause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 :  Sql.expr_t ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 :  Sql.expr_t ) in
    Obj.repr(
# 408 "src/parsers/Sqlparser.mly"
                                                           ( [_1,_3] )
# 1739 "src/parsers/Sqlparser.ml"
               : 'caseSimpleWhenClauseList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 :  Sql.expr_t ) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 :  Sql.expr_t ) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'caseSimpleWhenClauseList) in
    Obj.repr(
# 409 "src/parsers/Sqlparser.mly"
                                                           ( (_1,_3)::_5 )
# 1748 "src/parsers/Sqlparser.ml"
               : 'caseSimpleWhenClauseList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'condition) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 :  Sql.expr_t ) in
    Obj.repr(
# 412 "src/parsers/Sqlparser.mly"
                                                          ( [_1,_3] )
# 1756 "src/parsers/Sqlparser.ml"
               : 'caseSearchWhenClauseList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'condition) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 :  Sql.expr_t ) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'caseSearchWhenClauseList) in
    Obj.repr(
# 413 "src/parsers/Sqlparser.mly"
                                                          ( (_1,_3)::_5 )
# 1765 "src/parsers/Sqlparser.ml"
               : 'caseSearchWhenClauseList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 :  Sql.expr_t ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'functionParameters) in
    Obj.repr(
# 416 "src/parsers/Sqlparser.mly"
                                      ( _1::_3 )
# 1773 "src/parsers/Sqlparser.ml"
               : 'functionParameters))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 :  Sql.expr_t ) in
    Obj.repr(
# 417 "src/parsers/Sqlparser.mly"
                                      ( [_1] )
# 1780 "src/parsers/Sqlparser.ml"
               : 'functionParameters))
; (fun __caml_parser_env ->
    Obj.repr(
# 420 "src/parsers/Sqlparser.mly"
                        ( None )
# 1786 "src/parsers/Sqlparser.ml"
               : 'countAggParam))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 :  Sql.expr_t ) in
    Obj.repr(
# 421 "src/parsers/Sqlparser.mly"
                        ( None )
# 1793 "src/parsers/Sqlparser.ml"
               : 'countAggParam))
; (fun __caml_parser_env ->
    Obj.repr(
# 422 "src/parsers/Sqlparser.mly"
                        ( None )
# 1799 "src/parsers/Sqlparser.ml"
               : 'countAggParam))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'variableList) in
    Obj.repr(
# 423 "src/parsers/Sqlparser.mly"
                        ( Some(_2) )
# 1806 "src/parsers/Sqlparser.ml"
               : 'countAggParam))
; (fun __caml_parser_env ->
    Obj.repr(
# 426 "src/parsers/Sqlparser.mly"
     ( Eq )
# 1812 "src/parsers/Sqlparser.ml"
               : 'cmpOp))
; (fun __caml_parser_env ->
    Obj.repr(
# 427 "src/parsers/Sqlparser.mly"
     ( Neq )
# 1818 "src/parsers/Sqlparser.ml"
               : 'cmpOp))
; (fun __caml_parser_env ->
    Obj.repr(
# 428 "src/parsers/Sqlparser.mly"
     ( Lt )
# 1824 "src/parsers/Sqlparser.ml"
               : 'cmpOp))
; (fun __caml_parser_env ->
    Obj.repr(
# 429 "src/parsers/Sqlparser.mly"
     ( Lte )
# 1830 "src/parsers/Sqlparser.ml"
               : 'cmpOp))
; (fun __caml_parser_env ->
    Obj.repr(
# 430 "src/parsers/Sqlparser.mly"
     ( Gt )
# 1836 "src/parsers/Sqlparser.ml"
               : 'cmpOp))
; (fun __caml_parser_env ->
    Obj.repr(
# 431 "src/parsers/Sqlparser.mly"
     ( Gte )
# 1842 "src/parsers/Sqlparser.ml"
               : 'cmpOp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 :  Sql.expr_t ) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'cmpOp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 :  Sql.expr_t ) in
    Obj.repr(
# 434 "src/parsers/Sqlparser.mly"
                              ( Sql.Comparison(_1, _2, _3) )
# 1851 "src/parsers/Sqlparser.ml"
               : 'conditionAtom))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'condition) in
    Obj.repr(
# 435 "src/parsers/Sqlparser.mly"
                              ( _2 )
# 1858 "src/parsers/Sqlparser.ml"
               : 'conditionAtom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'conditionAtom) in
    Obj.repr(
# 438 "src/parsers/Sqlparser.mly"
                                  ( _1 )
# 1865 "src/parsers/Sqlparser.ml"
               : 'condition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'condition) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'condition) in
    Obj.repr(
# 439 "src/parsers/Sqlparser.mly"
                                  ( Sql.And(_1, _3) )
# 1873 "src/parsers/Sqlparser.ml"
               : 'condition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'condition) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'condition) in
    Obj.repr(
# 440 "src/parsers/Sqlparser.mly"
                                  ( Sql.Or(_1, _3) )
# 1881 "src/parsers/Sqlparser.ml"
               : 'condition))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'condition) in
    Obj.repr(
# 441 "src/parsers/Sqlparser.mly"
                                  ( Sql.Not(_2) )
# 1888 "src/parsers/Sqlparser.ml"
               : 'condition))
; (fun __caml_parser_env ->
    Obj.repr(
# 442 "src/parsers/Sqlparser.mly"
                                  ( Sql.ConstB(true) )
# 1894 "src/parsers/Sqlparser.ml"
               : 'condition))
; (fun __caml_parser_env ->
    Obj.repr(
# 443 "src/parsers/Sqlparser.mly"
                                  ( Sql.ConstB(false) )
# 1900 "src/parsers/Sqlparser.ml"
               : 'condition))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'selectStmt) in
    Obj.repr(
# 444 "src/parsers/Sqlparser.mly"
                                  ( Sql.Exists(_3) )
# 1907 "src/parsers/Sqlparser.ml"
               : 'condition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 :  Sql.expr_t ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 445 "src/parsers/Sqlparser.mly"
                                  ( Sql.Like(_1, _3) )
# 1915 "src/parsers/Sqlparser.ml"
               : 'condition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 :  Sql.expr_t ) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 446 "src/parsers/Sqlparser.mly"
                                  ( Sql.Not(Sql.Like(_1, _4)) )
# 1923 "src/parsers/Sqlparser.ml"
               : 'condition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 :  Sql.expr_t ) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 :  Sql.expr_t ) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 :  Sql.expr_t ) in
    Obj.repr(
# 448 "src/parsers/Sqlparser.mly"
   ( Sql.And(Sql.Comparison(_1, Gte, _3), Sql.Comparison(_1, Lte, _5)) )
# 1932 "src/parsers/Sqlparser.ml"
               : 'condition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 :  Sql.expr_t ) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'constantList) in
    Obj.repr(
# 449 "src/parsers/Sqlparser.mly"
                                                (
      Sql.InList(_1, _5)
   )
# 1942 "src/parsers/Sqlparser.ml"
               : 'condition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 :  Sql.expr_t ) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'constantList) in
    Obj.repr(
# 452 "src/parsers/Sqlparser.mly"
                                                    (
      Sql.Not(Sql.InList(_1, _6))
   )
# 1952 "src/parsers/Sqlparser.ml"
               : 'condition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 :  Sql.expr_t ) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'selectStmt) in
    Obj.repr(
# 455 "src/parsers/Sqlparser.mly"
                                         ( 
      scan_for_existence "IN" _4 Eq _1 
   )
# 1962 "src/parsers/Sqlparser.ml"
               : 'condition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 :  Sql.expr_t ) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'selectStmt) in
    Obj.repr(
# 458 "src/parsers/Sqlparser.mly"
                                             ( 
      Sql.Not(scan_for_existence "IN" _5 Eq _1)
   )
# 1972 "src/parsers/Sqlparser.ml"
               : 'condition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 :  Sql.expr_t ) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'cmpOp) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'selectStmt) in
    Obj.repr(
# 461 "src/parsers/Sqlparser.mly"
                                                 ( 
      scan_for_existence "SOME" _5 _2 _1 
   )
# 1983 "src/parsers/Sqlparser.ml"
               : 'condition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 :  Sql.expr_t ) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'cmpOp) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'selectStmt) in
    Obj.repr(
# 464 "src/parsers/Sqlparser.mly"
                                                ( 
      Sql.Not(scan_for_existence "ALL" _5 (inverse_of_cmp _2) _1)
   )
# 1994 "src/parsers/Sqlparser.ml"
               : 'condition))
; (fun __caml_parser_env ->
    Obj.repr(
# 467 "src/parsers/Sqlparser.mly"
        (
      bail "Invalid boolean predicate"
   )
# 2002 "src/parsers/Sqlparser.ml"
               : 'condition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'constant) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'constantList) in
    Obj.repr(
# 472 "src/parsers/Sqlparser.mly"
                                ( _1 :: _3 )
# 2010 "src/parsers/Sqlparser.ml"
               : 'constantList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'constant) in
    Obj.repr(
# 473 "src/parsers/Sqlparser.mly"
                                ( [_1] )
# 2017 "src/parsers/Sqlparser.ml"
               : 'constantList))
; (fun __caml_parser_env ->
    Obj.repr(
# 474 "src/parsers/Sqlparser.mly"
                                ( [] )
# 2023 "src/parsers/Sqlparser.ml"
               : 'constantList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 477 "src/parsers/Sqlparser.mly"
                                ( CInt(_1) )
# 2030 "src/parsers/Sqlparser.ml"
               : 'constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 478 "src/parsers/Sqlparser.mly"
                                ( CFloat(_1) )
# 2037 "src/parsers/Sqlparser.ml"
               : 'constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 479 "src/parsers/Sqlparser.mly"
                                ( CString(_1) )
# 2044 "src/parsers/Sqlparser.ml"
               : 'constant))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 480 "src/parsers/Sqlparser.mly"
                                ( Constants.parse_date _3 )
# 2051 "src/parsers/Sqlparser.ml"
               : 'constant))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 481 "src/parsers/Sqlparser.mly"
                     ( 
      Constants.parse_interval (String.uppercase _3) _2 None
   )
# 2061 "src/parsers/Sqlparser.ml"
               : 'constant))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 484 "src/parsers/Sqlparser.mly"
                                       ( 
      Constants.parse_interval (String.uppercase _3) _2 (Some(_5))
   )
# 2072 "src/parsers/Sqlparser.ml"
               : 'constant))
(* Entry dbtoasterSqlFile *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry dbtoasterSqlStmtList *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry expression *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let dbtoasterSqlFile (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf :  Sql.file_t )
let dbtoasterSqlStmtList (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 2 lexfun lexbuf :  Sql.t list )
let expression (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 3 lexfun lexbuf :  Sql.expr_t )
