# 1 "src/parsers/Calculuslexer.mll"
    
open Calculus
open Calculusparser
open Lexing   
open Type

let init_line lexbuf =
    let pos = lexbuf.Lexing.lex_curr_p in
        lexbuf.Lexing.lex_curr_p <- { pos with
            Lexing.pos_lnum = 1;
            Lexing.pos_bol = 0;
        }

let advance_line lexbuf =
    let pos = lexbuf.Lexing.lex_curr_p in
        lexbuf.Lexing.lex_curr_p <- { pos with
            Lexing.pos_lnum = pos.Lexing.pos_lnum + 1;
            Lexing.pos_bol = pos.Lexing.pos_cnum;
        }

let hashtbl_of_pair_list h l =
    List.iter (fun (p1, p2) -> Hashtbl.add h p1 p2) l

let keyword_table = Hashtbl.create 60
let keywords =   
    [   
      "VARCHAR",    VARCHAR;
      "CHAR",       CHAR;
      "DATE",       DATE;
      "CREATE",     CREATE;
      "TABLE",      TABLE;
      "STREAM",     STREAM;
      "AS",         AS;
      "FROM",       FROM;
      "ON",         ON;
      "DO",         DO;
      "DECLARE",    DECLARE;
      "QUERY",      QUERY;
      "MAP",        MAP;
      "PARTIAL",    PARTIAL;
      "INITIALIZED",INITIALIZED;
      "FILE",       FILE;
      "SOCKET",     SOCKET;
      "FIXEDWIDTH", FIXEDWIDTH;
      "LINE",       LINE;
      "DELIMITED",  DELIMITED;
      "AGGSUM",     AGGSUM;
      "SYSTEM",     SYSTEM;
      "READY",      READY;
      "CORRECT",    CORRECT;
      "WITH",       WITH;
      "FOR",        FOR;
      "INT",        TYPE(TInt);
      "INTEGER",    TYPE(TInt);
      "FLOAT",      TYPE(TFloat);
      "DOUBLE",     TYPE(TFloat);
      "DECIMAL",    TYPE(TFloat);
      "STRING",     TYPE(TString);
      "TRUE",       BOOL(true);
      "FALSE",      BOOL(false);
(***** BEGIN EXISTS HACK *****)
      "EXISTS",     EXISTS;
(***** END EXISTS HACK *****)
    ]
let _ = hashtbl_of_pair_list keyword_table keywords

let ops_table = Hashtbl.create 10
let ops =
    [   
        "=",    EQ;
        "!=",   NEQ;
        "<>",   NEQ;
        "<",    LT;
        "<=",   LTE;
        ">",    GT;
        ">=",   GTE;
        "+",    PLUS;
        "-",    MINUS;
        "*",    TIMES;
        "/",    DIVIDE;
        "#",    POUND;
        "^=",   LIFT;
    ]
let _ = hashtbl_of_pair_list ops_table ops
    

# 89 "src/parsers/Calculuslexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\234\255\236\255\002\000\241\255\242\255\243\255\244\255\
    \245\255\246\255\247\255\079\000\004\000\249\255\019\000\031\000\
    \035\000\065\000\076\000\078\000\101\000\156\000\178\000\254\255\
    \001\000\255\255\229\000\251\000\005\001\166\000\093\000\174\000\
    \200\000\028\001\066\001\089\001\104\001\127\001\250\255\239\255\
    \002\000\237\255\240\255\194\000\252\255\253\255\096\000\128\000\
    \255\255\254\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\020\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\007\000\006\000\255\255\006\000\006\000\
    \255\255\255\255\006\000\006\000\255\255\002\000\002\000\255\255\
    \001\000\255\255\255\255\003\000\255\255\255\255\255\255\002\000\
    \002\000\002\000\002\000\255\255\002\000\004\000\255\255\255\255\
    \017\000\255\255\255\255\255\255\255\255\255\255\003\000\003\000\
    \255\255\255\255";
  Lexing.lex_default = 
   "\255\255\000\000\000\000\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\255\255\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\020\000\255\255\255\255\000\000\
    \255\255\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\000\000\000\000\
    \040\000\000\000\000\000\044\000\000\000\000\000\255\255\255\255\
    \000\000\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\025\000\024\000\000\000\255\255\023\000\023\000\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \025\000\017\000\000\000\013\000\000\000\000\000\000\000\020\000\
    \009\000\008\000\013\000\015\000\010\000\014\000\041\000\012\000\
    \022\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\003\000\002\000\018\000\013\000\019\000\042\000\
    \040\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\011\000\011\000\007\000\039\000\006\000\016\000\011\000\
    \013\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\011\000\011\000\005\000\011\000\004\000\013\000\011\000\
    \011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\013\000\013\000\013\000\038\000\031\000\031\000\049\000\
    \011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\011\000\048\000\000\000\000\000\000\000\011\000\000\000\
    \011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\011\000\027\000\000\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\031\000\031\000\
    \027\000\026\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\046\000\000\000\000\000\000\000\
    \000\000\047\000\000\000\026\000\030\000\000\000\000\000\026\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \001\000\029\000\255\255\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\028\000\000\000\000\000\026\000\000\000\000\000\
    \035\000\000\000\035\000\000\000\030\000\037\000\037\000\037\000\
    \037\000\037\000\037\000\037\000\037\000\037\000\037\000\000\000\
    \000\000\029\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\028\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\000\000\
    \026\000\000\000\000\000\000\000\000\000\000\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\033\000\033\000\033\000\
    \033\000\034\000\033\000\000\000\000\000\255\255\033\000\033\000\
    \033\000\033\000\033\000\033\000\000\000\035\000\000\000\035\000\
    \000\000\000\000\036\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\036\000\000\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\034\000\
    \033\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
    \037\000\037\000\037\000\000\000\000\000\000\000\000\000\000\000\
    \036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\000\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\034\000\033\000\037\000\
    \037\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
    \037\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\045\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\033\000\033\000\033\000\033\000\033\000\033\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    ";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\040\000\000\000\024\000\040\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\255\255\000\000\255\255\255\255\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\012\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\
    \014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\015\000\000\000\000\000\000\000\
    \016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\011\000\000\000\017\000\011\000\
    \011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\018\000\018\000\019\000\020\000\030\000\030\000\046\000\
    \011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\011\000\047\000\255\255\255\255\255\255\011\000\255\255\
    \011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\011\000\021\000\255\255\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\031\000\031\000\
    \022\000\021\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\043\000\255\255\255\255\255\255\
    \255\255\043\000\255\255\031\000\022\000\255\255\255\255\022\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \000\000\022\000\040\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\022\000\255\255\255\255\032\000\255\255\255\255\
    \026\000\255\255\026\000\255\255\022\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\255\255\
    \255\255\022\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\022\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\255\255\
    \027\000\255\255\255\255\255\255\255\255\255\255\028\000\028\000\
    \028\000\028\000\028\000\028\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\033\000\033\000\033\000\
    \033\000\033\000\033\000\255\255\255\255\020\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\255\255\034\000\255\255\034\000\
    \255\255\255\255\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\255\255\033\000\033\000\033\000\
    \033\000\033\000\033\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
    \035\000\035\000\035\000\255\255\255\255\255\255\255\255\255\255\
    \036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\255\255\034\000\034\000\034\000\034\000\034\000\
    \034\000\036\000\036\000\036\000\036\000\036\000\036\000\037\000\
    \037\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
    \037\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\043\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\036\000\036\000\036\000\036\000\036\000\036\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    ";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec tokenize lexbuf =
    __ocaml_lex_tokenize_rec lexbuf 0
and __ocaml_lex_tokenize_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 112 "src/parsers/Calculuslexer.mll"
                ( tokenize lexbuf )
# 300 "src/parsers/Calculuslexer.ml"

  | 1 ->
# 113 "src/parsers/Calculuslexer.mll"
                ( advance_line lexbuf; tokenize lexbuf )
# 305 "src/parsers/Calculuslexer.ml"

  | 2 ->
# 114 "src/parsers/Calculuslexer.mll"
                ( INT(int_of_string (lexeme lexbuf)) )
# 310 "src/parsers/Calculuslexer.ml"

  | 3 ->
# 115 "src/parsers/Calculuslexer.mll"
                ( FLOAT(float_of_string (lexeme lexbuf)) )
# 315 "src/parsers/Calculuslexer.ml"

  | 4 ->
# 116 "src/parsers/Calculuslexer.mll"
                ( FLOAT(float_of_string (lexeme lexbuf)) )
# 320 "src/parsers/Calculuslexer.ml"

  | 5 ->
# 117 "src/parsers/Calculuslexer.mll"
                ( let s = lexeme lexbuf in 
                      STRING(String.sub s 1 ((String.length s)-2)) )
# 326 "src/parsers/Calculuslexer.ml"

  | 6 ->
# 120 "src/parsers/Calculuslexer.mll"
                ( let op_str = lexeme lexbuf in
                      try Hashtbl.find ops_table op_str
                      with Not_found -> 
                          raise (Failure ("unknown operator "^(op_str)))
                )
# 335 "src/parsers/Calculuslexer.ml"

  | 7 ->
# 125 "src/parsers/Calculuslexer.mll"
                ( 
                  let keyword_str = lexeme lexbuf in
                  let keyword_str_uc = String.uppercase keyword_str in
                      try Hashtbl.find keyword_table keyword_str_uc
                      with Not_found -> ID(keyword_str)
                )
# 345 "src/parsers/Calculuslexer.ml"

  | 8 ->
# 131 "src/parsers/Calculuslexer.mll"
                ( COMMA )
# 350 "src/parsers/Calculuslexer.ml"

  | 9 ->
# 132 "src/parsers/Calculuslexer.mll"
                ( LPAREN )
# 355 "src/parsers/Calculuslexer.ml"

  | 10 ->
# 133 "src/parsers/Calculuslexer.mll"
                ( RPAREN )
# 360 "src/parsers/Calculuslexer.ml"

  | 11 ->
# 134 "src/parsers/Calculuslexer.mll"
                ( LBRACKET )
# 365 "src/parsers/Calculuslexer.ml"

  | 12 ->
# 135 "src/parsers/Calculuslexer.mll"
                ( RBRACKET )
# 370 "src/parsers/Calculuslexer.ml"

  | 13 ->
# 136 "src/parsers/Calculuslexer.mll"
                ( LBRACE )
# 375 "src/parsers/Calculuslexer.ml"

  | 14 ->
# 137 "src/parsers/Calculuslexer.mll"
                ( RBRACE )
# 380 "src/parsers/Calculuslexer.ml"

  | 15 ->
# 138 "src/parsers/Calculuslexer.mll"
                ( SETVALUE )
# 385 "src/parsers/Calculuslexer.ml"

  | 16 ->
# 139 "src/parsers/Calculuslexer.mll"
                ( INCREMENT )
# 390 "src/parsers/Calculuslexer.ml"

  | 17 ->
# 140 "src/parsers/Calculuslexer.mll"
                ( tokenize lexbuf)
# 395 "src/parsers/Calculuslexer.ml"

  | 18 ->
# 141 "src/parsers/Calculuslexer.mll"
                ( comment 1 lexbuf )
# 400 "src/parsers/Calculuslexer.ml"

  | 19 ->
# 142 "src/parsers/Calculuslexer.mll"
                ( EOSTMT )
# 405 "src/parsers/Calculuslexer.ml"

  | 20 ->
# 143 "src/parsers/Calculuslexer.mll"
                ( COLON )
# 410 "src/parsers/Calculuslexer.ml"

  | 21 ->
# 144 "src/parsers/Calculuslexer.mll"
                ( EOF )
# 415 "src/parsers/Calculuslexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_tokenize_rec lexbuf __ocaml_lex_state

and comment depth lexbuf =
    __ocaml_lex_comment_rec depth lexbuf 43
and __ocaml_lex_comment_rec depth lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 147 "src/parsers/Calculuslexer.mll"
                ( raise (Failure ("nested comments are invalid")) )
# 426 "src/parsers/Calculuslexer.ml"

  | 1 ->
# 148 "src/parsers/Calculuslexer.mll"
                ( tokenize lexbuf )
# 431 "src/parsers/Calculuslexer.ml"

  | 2 ->
# 149 "src/parsers/Calculuslexer.mll"
                ( raise (Failure ("hit end of file in a comment")) )
# 436 "src/parsers/Calculuslexer.ml"

  | 3 ->
# 150 "src/parsers/Calculuslexer.mll"
                ( comment depth lexbuf )
# 441 "src/parsers/Calculuslexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_comment_rec depth lexbuf __ocaml_lex_state

;;

