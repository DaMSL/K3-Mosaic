/*
This example demonstrates K3's ability to test global state
at the end of execution against a constant expression specified in a file.
The program used here is quicksort, and is the same as 'examples/quicksort.k3'
*/

declare data : [ int ] = [ 3; 7; 4; 1; 8; 6; 2; 5 ] // Input to sort
declare final : { [int] } // Output datastructure

// Merge tree symbol counter
declare counter : {int} = { 0 }

declare incr : unit -> unit = \_ -> 
  let i:int = peek(counter) in do
  { delete(counter, i); insert(counter,i+1) }

declare gensym : unit -> int = \_ -> do { incr(()); peek(counter) }

// Asynchronous (i.e. non-blocking) quicksort state.
declare partials : [ (int, [int]) ]  // Pending merges identified by gensyms
declare parents  : [ (int, int, bool) ]  // Merge tree edges: (parent, child, left-or-right?); 0 is root

// Debugging datastructures
/*
declare pivots : [ (int, int) ]
declare qsort_in : [ (int, bool, [int]) ]
declare merge_in  : [ (int, bool, [int]) ]
*/

// Divide phase

trigger qsort( parent : int, left : bool, c : [int] ) {
  empty : [ int ], // TODO: hack for incomplete TUnknown type inference
  lhs : [ int ],
  rhs : [ int ]
} = do {
  //insert(qsort_in, parent, left, c); // Log qsort arguments
  let len:int = fold(\(acc:int,_) -> acc+1, 0, c) in
    if len <= 1 then
      send(merge, localhost:10000, parent, left, if len == 0 then empty else [peek(c)])

    else 
    // TODO: pick a better pivot.
    let (id:int, pivot:int) = (gensym(()), peek(c)) in do {
      //insert(pivots, parent, pivot);
      insert(parents, parent, id, left);
      iterate(\x:int -> if x <= pivot then insert(lhs, x) else insert(rhs, x), c);
      send(qsort, localhost:10000, id, true, lhs);
      send(qsort, localhost:10000, id, false, rhs)
    }
}


// Merge phase

trigger merge( id : int, left : bool, c : [int] ) {} = do {
  //insert(merge_in, id, left, c); // Log merge arguments
  
  let p : [(int, [int])] = partials[id,_] in
  
  if fold(\(acc:int,_) -> acc+1, 0, p) == 0 then insert(partials, id, c)
  else 
    // Proceed on binary barrier completion.      
    let merged:[int] = 
      let (_,x:[int]) = peek(p) in if left then c++x else x++c
    in
    let (parent:int, _, pleft:bool) = peek(parents[_,id,_]) in do {
      // Manual garbage collection. Comment to see partials and parents.
      /**/
      iterate(\x:(int,[int]) -> delete(partials,x), p);
      delete(parents, parent, id, pleft);
      /**/
      if parent == 0 then insert(final, merged)
      else send(merge, localhost:10000, parent, pleft, merged)
    }
}

trigger go(n:int) {} = send(qsort, localhost:10000, 0, true, data)

role client {
  // Kickstart with dummy value.
  source  s1 : int = file("data/a1.csv", csv)
  bind    s1 -> go
  consume s1
}

default role client

expected 

data = file "data/quicksort.data.test",
final = { [ 1; 2; 3; 4; 5; 6; 7; 8 ] }
