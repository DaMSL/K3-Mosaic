declare vertices:[(int,string,float,[int],[int])] // read this from file
declare tup:ref (int,string,float,[int],[int])
declare sourcevertex:ref {|int|} @ {1->2}
declare bindings:[(int,string,int)] // read this from file
declare len:ref int
declare acc:ref float
declare address:ref string
declare port:ref int
declare addr:ref (string,int)

declare getTuple:int->(int,string,float,[int],[int]) = \id:int -> peek(vertices[id,_,_,_,_]) 

declare getPageRank:(int,string,float,[int],[int])->float = \(a:int,b:string,c:float,d:[int],e:[int]) -> c

declare getOutEdges:(int,string,float,[int],[int])->[int] = \(a:int,b:string,c:float,d:[int],e:[int]) -> e

declare getInEdges:(int,string,float,[int],[int])->[int] = \(a:int,b:string,c:float,d:[int],e:[int]) -> d

declare getName:(int,string,float,[int],[int])->string = \(a:int,b:string,c:float,d:[int],e:[int]) -> b

declare getNumOutEdges:(int,string,float,[int],[int])->int = \(a:int,b:string,c:float,d:[int],e:[int]) -> do { len=0; iterate(\x:int -> do { len=len+1 },e); len }

declare apply:[int]->float = \(x:[int]) -> do { acc=0.0; iterate(\a:int->do { tup=getTuple(a); acc=acc + (getPageRank(tup) * getNumOutEdges(tup))},x); acc = 0.15+(0.85*acc); acc}

//TODO: the next two functions are very specific to addr structure. need to be made more generic
declare getFirst:(string,int)->string = \(a:string,b:int)->a

declare getSecond:(string,int)->int = \(a:string,b:int)->b

declare getAddress:int->(string,int) = \id:int -> do { iterate(\(a:int,b:string,c:int) -> do { if a==id then addr=(b,c) else () },bindings); addr }
							      
declare scatter:([int])->int = \(f:bool,e:[int])-> if f==true then do { iterate(\a:int->do { addr=getAddress(a); address=getFirst(addr); send(runPageRank,address:1,a) },e) } else ()

trigger on_event(a:int) {address:ref string} = do {
  insert(sourcevertex,a);
  addr=getAddress(a);
  address=getFirst(addr);
  send(runPageRank,address:1,a)
}

role client {
  source s1: (int) = file(csv, "source.csv")
  bind s1 -> on_event
}

default role client

trigger runPageRank(id:int) {outEdges:ref [int],inEdges:ref [int],name: ref string,oldPR:ref float,newPR:ref float,tuple:ref (int,string,float,[int],[int])} = do { 
  //gather
  tuple=getTuple(id);
  oldPR=getPageRank(tuple);
  inEdges=getInEdges(tuple);
  outEdges=getOutEdges(tuple);
  name=getName(tuple);
  //apply
  newPR=apply(inEdges);
  //update newPR
  update(vertices,tuple,(id,name,newPR,inEdges,outEdges));
  //scatter
  if newPR-oldPR>0.001 then scatter(outEdges) else ()
}
